[{"title":"Git中的一些骚操作","url":"/2017/git-command-backup/","content":"\n最近因为[Valine](https://valine.js.org)，所以经常用到`Git`。当然，工作中也有用到，但基本上是用的`图形化`。\n\n这里最`Git`的相关操作命令做个备份，以备不时之需。\n\n> 可能不定时更新。\n\n \n# 配置自动换行\n```bash\ngit config --global core.autocrlf input # 提交时自动将换行符转成lf\n```\n\n# 多账号配置SSH\n修改`~/.ssh/config`文件(Windows平台)\n```bash\n# 配置 Github.com\nHost github.com\n     HostName github.com\n     IdentityFile C:\\\\path\\\\to\\\\.ssh\\\\id_rsa_github\n     PreferredAuthentications publickey\n     User YourName\n\n# 配置 Coding.net\nHost git.coding.net\n     HostName git.coding.net\n     IdentityFile C:\\\\path\\\\to\\\\.ssh\\\\id_rsa_coding\n     PreferredAuthentications publickey\n     User YourName\n\n# 配置 Gitee.com\nHost gitee.com\n     HostName gitee.com\n     IdentityFile C:\\\\path\\\\to\\\\.ssh\\\\id_rsa_gitee\n     PreferredAuthentications publickey\n     User YourName\n```\n# pull 强制覆盖本地文件\n\n```bash\ngit fetch --all  \ngit reset --hard origin/master \n```\n\n# push 强制覆盖远程文件\n```bash\ngit push -f origin master \n```\n\n# 保持fork之后的项目和上游同步\n团队协作，为了规范，一般都是fork组织的仓库到自己帐号下，再提交pr，组织的仓库一直保持更新，下面介绍如何保持自己fork之后的仓库与上游仓库同步。\n\n下面以我 fork 团队的博客仓库为例\n\n点击 fork 组织仓库到自己帐号下，然后就可以在自己的帐号下 clone 相应的仓库\n\n使用 `git remote -v` 查看当前的远程仓库地址，输出如下：\n```bash\norigin  git@github.com:ibrother/staticblog.github.io.git (fetch)\norigin  git@github.com:ibrother/staticblog.github.io.git (push)\n```\n可以看到从自己帐号 clone 下来的仓库，远程仓库地址是与自己的远程仓库绑定的（这不是废话吗）\n\n接下来运行: \n\n```bash\ngit remote add upstream https://github.com/staticblog/staticblog.github.io.git\n```\n\n这条命令就算添加一个别名为 upstream（上游）的地址，指向之前 fork 的原仓库地址。`git remote -v` 输出如下：\n```bash\norigin  git@github.com:ibrother/staticblog.github.io.git (fetch)\norigin  git@github.com:ibrother/staticblog.github.io.git (push)\nupstream        https://github.com/staticblog/staticblog.github.io.git (fetch)\nupstream        https://github.com/staticblog/staticblog.github.io.git (push)\n```\n\n之后运行下面几条命令，就可以保持本地仓库和上游仓库同步了\n```bash\ngit fetch upstream\ngit checkout master\ngit merge upstream/master\n```\n接着就是熟悉的推送本地仓库到远程仓库\n```bash\ngit push origin master\n```\n\n> From [staticblog](https://github.com/staticblog/wiki/wiki/%E4%BF%9D%E6%8C%81fork%E4%B9%8B%E5%90%8E%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%92%8C%E4%B8%8A%E6%B8%B8%E5%90%8C%E6%AD%A5) .\n","tags":["Git","Command"],"categories":["学习笔记"]},{"title":"Valine -- 一款极简的评论系统","url":"/2017/add-valine-comments-to-your-blog/","content":"![Valine](https://tva2.sinaimg.com/large/006qRazegy1flcucgbhmuj30sf0o3mxy.jpg)\n\n> [Valine](https://Valine.js.org) - 一款极简的`无后端`评论系统.\n\n2017年6月1日，在你等超龄儿童欢度节日的时候，多说躺下了。\n2017年8月1日，不甘寂寞的网易云跟帖也跟多说随风而去了。\n\n2017年8月7日，一款基于`Leancloud`的极简风评论系统诞生：[Valine](https://Valine.js.org)。\n\n \n\n# 食用方法\n\n## 获取 `APP ID` 和 `APP KEY`\n1. [点击这里登录或注册`Leancloud`](https://leancloud.cn/dashboard/login.html#/signup)\n2. [点这里创建应用](https://leancloud.cn/dashboard/applist.html#/newapp)，应用名看个人喜好。\n3. 选择刚刚创建的`应用`>`设置`>选择`应用 Key`，然后你就能看到你的`APP ID`和`APP KEY`了，参考下图：\n    ![](https://tva2.sinaimg.com/large/006qRazegy1fibactm2csj30x80f2dhn.jpg)\n4. 为了您的数据安全，请填写`应用`>`设置`>`安全设置`中的`Web 安全域名`，如下图：\n    ![](https://tva2.sinaimg.com/large/006qRazegy1fiba67warvj30re0k5abv.jpg)\n\n## 页面中的设置\n页面中的食用方法炒鸡简单，来来来，我们用代码说话：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Valine - A simple comment system based on Leancloud.</title>\n    <!--Leancloud 操作库:-->\n    <script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"></script>\n    <!--Valine 的核心代码库:-->\n    <script src=\"./dist/Valine.min.js\"></script>\n</head>\n<body>\n    <div class=\"comment\"></div>\n    <script>\n        new Valine({\n            // AV 对象来自上面引入av-min.js(老司机们不要开车➳♡゛扎心了老铁)\n            av: AV, \n            el: '.comment', // \n            app_id: 'Your APP ID', // 这里填写上面得到的APP ID\n            app_key: 'Your APP KEY', // 这里填写上面得到的APP KEY\n            placeholder: 'ヾﾉ≧∀≦)o来啊，快活啊!' // [v1.0.7 new]留言框占位提示文字\n        });\n    </script>\n</body>\n</html>\n```\n看吧，我是不是没说大话(`_(:з」∠)_一本正经的胡说八道`)。\n\n# 评论数据管理\n插播一下，关于评论数据管理，请自行登录`Leancloud`应用管理。\n具体步骤：`登录`>选择你创建的`应用`>`存储`>选择Class`Comment`，然后就可以尽情的发挥你的权利啦(～￣▽￣)～ \n![](https://tva2.sinaimg.com/large/006qRazegy1fibb4pbvv4j31820iqjw0.jpg)\n\n\n-----------------------------------------  \n>更多配置信息请移步：https://valine.js.org\n\n----------------------------------------  \n\n--EOF--\n\n\n","tags":["Valine","Comment System","评论系统","Minimalist"],"categories":["学习笔记"]},{"title":"不同的国家/地区与语言缩写代码","url":"/2017/country-city-and-language/","content":"|国家/地区|语言代码|国家地区|语言代码|\n|--------|:------:|-------|:-----:|\n|简体中文(中国)|zh-cn|简体中文(台湾地区)|zh-tw|\n|繁体中文(香港)|zh-hk|英语(香港)|en-hk|\n|英语(美国)|en-us|英语(英国)|en-gb|\n|英语(全球)|en-ww|英语(加拿大)|en-ca|\n|英语(澳大利亚)|en-au|英语(爱尔兰)|en-ie|\n|英语(芬兰)|en-fi|芬兰语(芬兰)|fi-fi|\n|英语(丹麦)|en-dk|丹麦语(丹麦)|da-dk|\n|英语(以色列)|en-il|希伯来语(以色列)|he-il|\n|英语(南非)|en-za|英语(印度)|en-in|\n|英语(挪威)|en-no|英语(新加坡)|en-sg|\n|英语(新西兰)|en-nz|英语(印度尼西亚)|en-id|\n|英语(菲律宾)|en-ph|英语(泰国)|en-th|\n|英语(马来西亚)|en-my|英语(阿拉伯)|en-xa|\n|韩文(韩国)|ko-kr|日语(日本)|ja-jp|\n|荷兰语(荷兰)|nl-nl|荷兰语(比利时)|nl-be|\n|葡萄牙语(葡萄牙)|pt-pt|葡萄牙语(巴西)|pt-br|\n|法语(法国)|fr-fr|法语(卢森堡)|fr-lu|\n|法语(瑞士)|fr-ch|法语(比利时)|fr-be|\n|法语(加拿大)|fr-ca|西班牙语(拉丁美洲)|es-la|\n|西班牙语(西班牙)|es-es|西班牙语(阿根廷)|es-ar|\n|西班牙语(美国)|es-us|西班牙语(墨西哥)|es-mx|\n|西班牙语(哥伦比亚)|es-co|西班牙语(波多黎各)|es-pr|\n|德语(德国)|de-de|德语(奥地利)|de-at|\n|德语(瑞士)|de-ch|俄语(俄罗斯)|ru-ru|\n|意大利语(意大利)|it-it|希腊语(希腊)|el-gr|\n|挪威语(挪威)|no-no|匈牙利语(匈牙利)|hu-hu|\n|土耳其语(土耳其)|tr-tr|捷克语(捷克共和国)|cs-cz|\n|斯洛文尼亚语|sl-sl|波兰语(波兰)|pl-pl|\n|瑞典语(瑞典)|sv-se|西班牙语 (智利)|es-cl|","tags":["国家/地区","语言缩写"],"categories":["其他"]},{"title":"从删库到跑路 -- MySql 不算初体验的初体验","url":"/2017/mysql-tutorial/","content":"![](https://tva2.sinaimg.com/large/006qRazegy1fdwz005otpg30bx0c8my5.gif)\n\n最近准备找时间把[bing壁纸](http://bing.ioliu.cn)项目重构，但由于虚拟主机快要过期了，所以目前的首要任务是将数据库从[阿里云](/go/aliyun)的虚拟主机转移到我自己的服务器上。\n \n\n因为多年前学过SQLServer、Oracle、MySql等数据库，但许久未用，技艺生疏，所以这里是不算初体验的初体验。\n\n本文将执行三步走计划：\n- 安装\n- 登录\n- 使用\n\n\n# 安装\n在Debian上安装MySql很简单，运行如下命令就基本OK：\n```bash\n$ apt-get install mysql-server mysql-client\n```\n其中mysql-server是服务器程序，mysql-client是客户端程序。安装过程中会有如下提示，需要设置mysql数据库密码；输入要设置的密码后，回车即可继续安装。\n![](https://tva2.sinaimg.com/large/006qRazegy1fdwzjbm227j30in0bmwhm.jpg)\n> 如果出现`Unable to locate package mysql-server`等错误，请先执行`apt-get update`后重试。\n\n# 登录\n安装成功后，mysql会自动启动，可以通过`ps -ef | grep mysql`查看mysql是否运行。\n登陆mysql:\n```bash\n# login\n$ mysql -u root -p\nEnter password: # 输入密码\n```\n其中-u后跟的是用户名，-p要求输入密码，回车后在输入密码处输入密码。\n\n查看数据库`show databases;`：\n```mysql\n$ mysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n4 rows in set (0.00 sec)\n```\n\n# 使用\n\n## 创建数据库\n```bash\n$ mysql> create database DB_name;\nQuery OK, 1 row affected (0.05 sec)\n```\n## 查看刚刚创建的数据库\n```bash\n$ mysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| DB_name            |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n5 rows in set (0.00 sec)\n```\n\n## 使用刚刚创建的数据库\n```bash\n$ mysql> use DB_name;\nDatabase changed\n```\n\n## 创建表\n```bash\n$ mysql> CREATE TABLE IF NOT EXISTS person (\n        number INT(11),\n        name VARCHAR(255),\n        birthday DATE\n    );\n```\n## 查看表\n```bash\n$ mysql> SHOW CREATE table person;\n\nCREATE TABLE `person` (\n  `number` int(11) DEFAULT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `birthday` date DEFAULT NULL\n) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n```\n## 查看表的所有列\n```bash\n$ mysql> SHOW FULL COLUMNS from person;\n+----------+--------------+-----------------+------+-----+---------+-------+---------------------------------+---------+\n| Field    | Type         | Collation       | Null | Key | Default | Extra | Privileges                      | Comment |\n+----------+--------------+-----------------+------+-----+---------+-------+---------------------------------+---------+\n| number   | int(11)      | NULL            | YES  |     | NULL    |       | select,insert,update,references |         |\n| name     | varchar(255) | utf8_general_ci | YES  |     | NULL    |       | select,insert,update,references |         |\n| birthday | date         | NULL            | YES  |     | NULL    |       | select,insert,update,references |         |\n+----------+--------------+-----------------+------+-----+---------+-------+---------------------------------+---------+\n```\n## 创建临时表\n```bash\n$ mysql> CREATE TEMPORARY TABLE temp_person (\n        number INT(11),\n        name VARCHAR(255),\n        birthday DATE\n    );\n```\n## 删除表\n```bash\n$ mysql> DROP TABLE temp_person;\n# or\n$ mysql> DROP TABLE IF EXISTS temp_person;\n```\n\n## 创建用户\n命令：\n```bash\n$mysql> CREATE USER 'username'@'host' IDENTIFIED BY 'password';\n```\n说明：\n- `username`：你将创建的用户名\n- `host`：指定该用户在哪个主机上可以登陆，如果是本地用户可用`localhost`，如果想让该用户可以从任意远程主机登陆，可以使用通配符`%`\n- `password`：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器\n\n例子：\n```bash\n$mysql> CREATE USER 'dog'@'localhost' IDENTIFIED BY '123456';\n$mysql> CREATE USER 'pig'@'192.168.1.101_' IDENDIFIED BY '123456';\n$mysql> CREATE USER 'pig'@'%' IDENTIFIED BY '123456';\n$mysql> CREATE USER 'pig'@'%' IDENTIFIED BY '';\n$mysql> CREATE USER 'pig'@'%';\n```\n## 授权\n命令：\n```bash\n$mysql> GRANT privileges ON databasename.tablename TO 'username'@'host'\n```\n说明:\n- `privileges`：用户的操作权限，如`SELECT`，`INSERT`，`UPDATE`等，如果要授予所的权限则使用ALL\n- `databasename`：数据库名\n- `tablename`：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用\\*表示，如`*.*`\n例子：\n```bash\n$mysql> GRANT SELECT, INSERT ON test.user TO 'pig'@'%';\n$mysql> GRANT ALL ON *.* TO 'pig'@'%';\n```\n> **注意**\n 用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:\n ```bash\n $mysql> GRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;\n ```\n\n## 设置与更改用户密码\n命令：\n```bash\n$mysql> SET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');\n```\n> 如果是当前登陆用户用:\n ```bash\n >$mysql> SET PASSWORD = PASSWORD(\"newpassword\");\n ```\n例子：\n```bash\n$mysql> SET PASSWORD FOR 'pig'@'%' = PASSWORD(\"123456\");\n```\n## 撤销用户权限\n命令：\n```bash\n$mysql> REVOKE privilege ON databasename.tablename FROM 'username'@'host';\n```\n说明：\n`privilege`, `databasename`, `tablename`：[同授权部分](#授权)\n例子：\n```bash\n$mysql> REVOKE SELECT ON *.* FROM 'pig'@'%';\n```\n> 注意:\n 假如你在给用户`'pig'@'%'`授权的时候是这样的（或类似的）：`GRANT SELECT ON test.user TO 'pig'@'%'`，则在使用`REVOKE SELECT ON *.* FROM 'pig'@'%'`;\n 命令并不能撤销该用户对test数据库中user表的`SELECT` 操作。\n 相反，如果授权使用的是`GRANT SELECT ON *.* TO 'pig'@'%'`, 则`REVOKE SELECT ON test.user FROM 'pig'@'%'`;\n 命令也不能撤销该用户对test数据库中user表的`SELECT`权限。\n 具体信息可以用命令`SHOW GRANTS FOR 'pig'@'%'`; 查看。\n\n ## 删除用户\n ```bash\n $mysql> DROP USER 'username'@'host';\n ```\n\n# 最后\n能看到这里，那就先要恭喜你了，你已经成功达成建库、建表、建用户到删表、删库、删用户等成就。那还等什么？赶紧跑路吧ε=ε=ε=┏(゜ロ゜;)┛\n\n-------------------------------------\n附：\n- [MySql官网](https://www.mysql.com/)\n- [MySql Tutorial](https://www.tutorialspoint.com/mysql/)\n- [Mysql创建用户并授权命令](https://github.com/cnt1992/cnt1992.github.io/wiki/Mysql%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%B9%B6%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4)","tags":["MySql","数据库"],"categories":["学习笔记"]},{"title":"给你的网站加把锁 -- Let's Encrypt 完全体验","url":"/2017/add-a-lock-to-your-website/","content":"![](https://tva2.sinaimg.com/large/006qRazegy1fdunpet5toj30t50d7n3d.jpg)\n\n今天抽时间将所有的网站[SSL证书](https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E5%8D%94%E8%AD%B0)都更新了成 [Let's Encrypt](https://letsencrypt.org/) 了。采用了[certbot](https://certbot.eff.org) 这样的自动化工具，配置管理起来非常容易(一本正经的胡说八道)，这里将对整个体验过程做个详细记录。\n\n\n# 了解 Let’s Encrypt\n> The project aims to make encrypted connections in the World Wide Web the default case. By getting rid of payment, web server configuration, validation emails and dealing with expired certificates it is meant to significantly lower the complexity of setting up and maintaining TLS encryption.On a Linux web server, execution of only two commands is sufficient to set up HTTPS encryption, acquire and install certificates within 20 to 30 seconds.\n\n[Let's Encrypt](https://letsencrypt.org/) 是一个2015年末推出的数字证书认证机构，将通过旨在消除当前手动创建和安装证书的复杂过程的自动化流程，为安全网站提供免费的SSL/TLS证书。\n\n# 获取 Let's Encrypt\n![](https://tva2.sinaimg.com/large/006qRazegy1fduo29ztewj30mb0bxt9d.jpg)\nLet's Encrypt 证书生成不需要手动进行，官方推荐 [Certbot](https://certbot.eff.org) 这套自动化工具来实现。4步轻松搞定：\n- 下载安装 certbot (Let’s Encrypt项目的自动化工具)\n- 获得SSL证书\n- 修改Nginx配置文件\n- 续订\n\n## 1. 安装 Certbot\n根据 [Certbot](https://certbot.eff.org) 官网指南，`Debian 8`上执行如下命令，安装certbot:\n```bash\n$ sudo apt-get update\n$ sudo apt-get install certbot -t jessie-backports\n```\n等安装完成，`certbot`就可以使用了。\n\n## 2. 获取SSL证书\nLet’s Encrypt提供了通过各种插件获取SSL证书的各种方法。不同的是Apache的插件，大多数的插件只会帮助你得到，你必须手动配置你的Web服务器使用证书。仅获取证书而不安装证书的插件称为“验证器”，因为它们用于验证服务器是否应颁发证书。\n下面将使用`Webroot`的插件来获取SSL证书。\n\n### 如何使用 Webroot 插件：\nWebroot 的工作插件放置在一个特殊的文件`/.well-known`目录文档根目录下，它可以打开（通过Web服务器）内由让我们的加密服务进行验证。 根据配置的不同，你可能需要明确允许访问/.well-known目录。\n\n为了确保该目录可供Let’s Encrypt进行验证，让我们快速更改我们的Nginx配置。编辑`/etc/nginx/conf.d/example.com.conf`文件，并将下面代码添加进去:\n```nginx\nlocation ~ /.well-known {\n    allow all;\n}\n```\n使用`nginx -t`测试配置文件是否正确，在正确的情况下，重新让Nginx重新加载配置文件:\n```bash\n$ sudo systemctl reload nginx\n```\n\n### 使用certbot命令获取证书：\n```bash\n$ sudo certbot certonly --webroot -w /var/www/example -d example.com -d www.example.com -w /var/www/thing -d thing.is -d m.thing.is\n```\n- `-w`:指定网站所在目录\n- `-d`:指定要生成证书的域名，如果你想多个域名保存在一个证书里(最多四个)(如`example.com`、`www.example.com`、`thing.is`、`m.thing.is`)，请确保使用适当的webroot路径和域名替换命令中的相对应部分。\n\n接下来，同意加密订阅协议：\n![](https://tva2.sinaimg.com/large/006qRazegy1fdup0jojf7j30fv0bdwf1.jpg)\n\n如果一切顺利，你应该看到一个类似下面的输出消息：\n>**IMPORTANT NOTES:**\n - Congratulations! Your certificate and chain have been saved at\n   `/etc/letsencrypt/live/example.com/fullchain.pem`. Your cert will expire\n   on **`2017-06-19`**. To obtain a new or tweaked version of this\n   certificate in the future, simply run certbot again. To\n   non-interactively renew *all* of your certificates, run \"certbot\n   renew\"\n - If you like Certbot, please consider supporting our work by:\n>\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n\n### 证书文件\n如果运行顺利，所有服务器所需要的证书就已经生成好了。他们被放在了 `/etc/letsencrypt/live/example.com/` 下：\n```bash\n$ ls /etc/letsencrypt/live/example.com/\ncert.pem #server cert only  \nprivkey.pem #private key  \nchain.pem #intermediates  \nfullchain.pem #server cert + intermediates \n```\n## 3.修改Nginx配置文件\n到这里已经成功一大半了，只需要配置 Nginx 支持刚刚生成的证书。最佳实践可以参考[Mozilla SSL Configuration Generator](https://mozilla.github.io/server-side-tls/ssl-config-generator/)。\n![](https://tva2.sinaimg.com/large/006qRazegy1fdupi6lhxmj30oz0lon0q.jpg)\n注意去掉HSTS的勾(勾上会强制https，并且很难消除后续影响)。\n\n请根据自己的服务配置修改和添加内容，**重点只需要关注6行**：\n```nginx\nserver {  \n    listen 443 ssl http2;\n    ....\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_dhparam /etc/nginx/ssl/dhparam.pem;\n\n    ssl_trusted_certificate /etc/letsencrypt/live/example.com/root_ca_cert_plus_intermediates;\n\n    resolver <IP DNS resolver>;\n    ....\n}\n```\n`dhparam.pem`可以通过以下命令生成：\n```bash\n$ sudo mkdir /etc/nginx/ssl\n$ sudo openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048\n```\nNginx 配置完成后重启，用浏览器测试是否一切正常。\n![](https://tva2.sinaimg.com/large/006qRazegy1fdupmoluqij306y035glg.jpg)\n\n## 4.续订\n`Let's Encrypt`证书有效期只有3个月，所以，需要定时renew。我将使用`corntab`来执行renew命令:\n```bash\n$ sudo crontab -e\n```\n添加以下行：\n```crontab\n30 2 * * 1 /usr/bin/certbot renew >> /var/log/le-renew.log && /bin/systemctl reload nginx\n```\n保存，并退出。这个定时任务将在每个星期一的凌晨两点半执行`certbot renew`命令，并重启Nginx。最后将日志输出到`/var/log/le-renewal.log`。\n\n# 测试你的网站 SSL 安全性\n[Qualys SSL Labs](https://www.ssllabs.com/ssltest/index.html) 提供了全面的 SSL 安全性测试，填写你的网站域名，给自己的 HTTPS 配置打个分。\n![](https://tva2.sinaimg.com/large/006qRazegy1fdupydm71rj30ts0fkt9s.jpg)\n这意味着你网站的HTTPS已经启用成功啦，为自己鼓个掌。 (๑•̀ㅂ•́)و✧。\n\n------------------------------------------\n\n# 附：\n还有一种方法，不需要访问你的网站目录，但需要临时停止Nginx服务器(需要用到80端口)：\n1. 停止Nginx\n2. 域名解析到你的服务器IP\n3. 执行命令:`certbot certonly --standalone -d example.com -d www.example.com`\n\n然后的步骤就和上面一样啦~~~\n\n以上。\n\n","tags":["Let's Encrypt","https","cerbot"],"categories":["学习笔记"]},{"title":"判断变量类型的一些方法","url":"/2016/judgment-variable-type/","content":"\n久了不用，就会发现，以前会的东西都会忘记掉(或者是完全想不起来了)，不知道你们有没有遇到过这个情况  - -!\n\n这里只是对判断`变量类型`方法的一些记录，方便以后能够随时查看。\n\n### typeof\n要判断变量类型，首先想到的就是`typeof`，但用了才知道，其结果完全不是理想中的:\n```js\ntypeof {};  //\"object\"\ntypeof [];  //\"object\"\ntypeof \"\";  //\"string\"\ntypeof 0;   //\"number\"\ntypeof function(){};//\"function\"\ntypeof true;//\"boolean\"\n```\n \n由上面代码可以看出，数组也是对象，所以`typeof`不是我们理想中的解决方案。\n\n当然，有的童鞋可能会说，由于`length`是`Array`特有的属性(非绝对),那是不是可以用`length`+`typeof`来判断。\n\n当然，这是可以的：\n```js\nvar arr = [1,2];\nif(typeof arr === 'object'){\n    console.log(typeof arr.length === \"number\" ? \"array\" : \"object\");//这里输出 \"array\"\n}\n//...其他的就不一一罗列了\n```\n不过这个方法不通用，如果`{key:value}`对象中有 `length` 字段呢，如：\n```js\n//这种情况对于上面的代码就不适用了\nvar obj = {\n    name:\"square\",\n    length:50,\n    width:50\n};\n```\n### instanceof\n第二种解决方案就是使用`instanceof`，不过使用`instanceof`会出现`[] instanceof Object === true`的情况。这样就需要优先判断`Array`：\n```js\nvar a = [1,2,3];\nvar b = {name:'zhangsan',sex:123};\nvar fn = function(){};\nvar detectType = function(o){\n    if(o instanceof Array){\n        return 'Array'\n    }else if( o instanceof Object ){\n        return 'Object';\n    }else{\n        return 'param is no object type';\n    }\n}\nconsole.log( detectType(a) );    // Array\nconsole.log( detectType(b) );    // Object\nconsole.log( detectType(1) );    // param is no object type\nconsole.log( detectType(true) ); // param is no object type\nconsole.log( detectType('a') );  // param is no object type\n```\n\n### Object.prototype.toString.call\n还有一种最靠谱的办法就是`Object.prototype.toString.call`:\n```js\nObject.prototype.toString.call([])              //\"[object Array]\"\nObject.prototype.toString.call(Object)          //\"[object Function]\"\nObject.prototype.toString.call(function x(){})  //\"[object Function]\"\nObject.prototype.toString.call(\"\")              //\"[object String]\"\nObject.prototype.toString.call({})              //\"[object Object]\"\nObject.prototype.toString.call(null)            //\"[object Null]\"\nObject.prototype.toString.call(undefined)       //\"[object Undefined]\"\nObject.prototype.toString.call(/test/)          //\"[object RegExp]\"\nObject.prototype.toString.call(new Date())      //\"[object Date]\"\n\n```\n### 参考文档\n1. [Object.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString)","tags":["JavaScript","前端","变量类型"],"categories":["学习笔记"]},{"title":"CSS 内容和特殊字符","url":"/2016/css-content-and-special-characters/","content":"当我写这个主题`theme`的时候，我想在我的列表元素(`list elements`)上用CSS内容(`CSS content`)属性添加一些**向右双角引号(right-pointing double-angle quotation marks)(`<<`)**。\n\n所以，我在里面添加了`&raquo;`，然而，它并不工作！\n\n我花了一点时间去了解到，你不能使用常规的 HTML 实体内容。相反，你必须使用 Unicode 十六进制格式，它看起来像这样：`\\bb`。\n\n这是一些你可以轻而易举找到的东西，只因为它出现在了众多课程和参考书里。\n \n## 将HTML实体转换成Unicode十六进制代码\n这里有很多的HTML实体对应表，但是没有更多的 Unicode十六进制表，所以很方便的知道二者之间的转换。你需要知道所有的HTML十进制单位(它们看起来像这样`&#123;`，而不是像这样`&quot;`)。\n那数字，你猜到了吧，就是十进制格式。我们需要将其转换成Unicode十六进制(我知道，你震惊了！)。\n\n\n如果你不是一个程序员或者数学天才，可能你不熟悉到底该怎么做(具体请[Google](https://google.com))。OK，其实这并不难，但有一个更快捷的方式:\n\n打开类似于经典的Windows计算器，切换到“程序员”视图(`View > Programmer`)。点击`Dec(十进制)`单选按钮，输入你的数字然后点击`Hex(十六进制)`按钮，你就会得到你的十六进制数字。\n\n然后把刚刚得到的数字放到`\\`之后，你就得到了你自己的Unicode十六进制字符。\n\n## 更容易的方法 - HTML实体(HTML Entity)和 Unicode 十六进制 对应表\n\n这个方法不需要你手动的将十进制转成十六进制，这个图表能够给你一些常见的(或者不是那么常见的)符号的参考：\n<iframe width=\"100%\" height=\"500\" src=\"//jsfiddle.net/LNing/kqq1wnus/embedded/result/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"></iframe>\n\n","tags":["前端","CSS","译文"]},{"title":"JavaScript 最佳实践: 提升你代码质量的一些提示&技巧","url":"/2016/javascript-best-practices-tips-and-tricks-to-level-up-your-code/","content":"\n![](https://tva2.sinaimg.com/large/006qRazegw1f7f8plb62gj30p00cimxw.jpg)\n\n每天学习新事物是成为一个伟大的人的一部分。而对开发者而言，持续不断学习新的东西是我们工作中的一部分，无论这些东西是否是你主动想学的。\n\n在本教程中，我会指出一些重要的 JavaScript 最佳实践，因此你不必觉得学习它是条艰难的路。准备提升你的代码吧！\n \n## 避免全局污染(Avoid polluting the global scope)\n声明变量(`Declaring variables`)是很有趣的。有时候，你可能声明了全局变量，即使你不想声明它。在如今的浏览器中，全局变量存储在`window`对象中。因此，有很多有趣的东西发生在那里，你可能会重写默认值。\n让我们假设你有一个HTML文件，其中包含一个`<script>`标签(或者在加载的 JavaScript 文件中包含):\n```js\nvar foo = 42;\nconsole.log(foo);\n```\n这很显然会在控制台输出`42`。但是，因为这段代码没有在函数中执行，上下文将是一个全局的。因此，变量是附加到`window`对象的。这意味着`window.foo`的值也是`42`。\n\n这是危险的，因为你可以重写已经存在的全局变量:\n```js\nfunction print(){\n\t//do something...\n}\n\nprint();\n```\n\n因为我们重写了原生的打印弹窗(`native print popup`)，所以当我们执行`window.print()` (或者只执行`print()`)的时候不会打开打印弹窗(`print popup`)。\n\n这个问题很好解决，我们需要一个立即调用(`called immediately`) 的包装函数(`wrapping function`) (译者注:作者这里可能是要表达一个闭包函数`closure function`或者是匿名函数`anonymous function`)，像下面的代码:\n```js\n// Declare an anonymous function\n// 声明一个匿名函数\n(function () {\n   var foo = 42;\n   console.log(window.foo);\n   // → undefined\n   console.log(foo);\n   // → 42\n})();\n//^ and call it immediately\n```\n\n另外，你应该选择发送`window`和其他的全局变量(如:`document`)作为函数的参数(这可能会提高性能):\n```js\n(function (global, doc) {\n  global.setTimeout(function () {\n     doc.body.innerHTML = \"Hello!\";\n  }, 1000);\n})(window, document);\n```\n\n因此，使用包装函数来防止创建不必要的全局变量。注意，这不是说我在接下来的代码片段使用包装函数，我们应该把关注点放在代码本身。  \n\n> 💡小提示: [browserify][browserify]是另外一种防止创建不必要的全局变量的方式。它和 Node.js 采用的是同样的方式，使用的`require function`。\n\n-------------------------------  \n\n*学习更多关于浏览器开发者工具请点击 [Web 开发指南][web development guide]* \n \n-------------------------------  \n\n\n顺便说一句，Node.js 会在函数里自动打包你的文件，它们看起来像这样：\n```js\n(function (exports, require, module, __filename, __dirname) {\n// ...\n```\n\n因此，如果这让你认为`require`函数是全局的那就错了。它只不过是一个函数的参数罢了。\n\n**你知道吗？**\n由于`window`对象本身就是一个包含全局变量的全局变量，因此它的引用是自身:\n```js\nwindow.window.window\n// => Window {...}\n```\n\n那是因为`window`对象是一个环路对象(`circular object`)，下面演示怎么创建一个这样的对象：\n```js\n// Create an Object\nvar foo = {};\n\n// Point a key value to the object itself\n// 设置一个key，值为它本身\nfoo.bar = foo;\n\n// The `foo` object just became a circular one:\nfoo.bar.bar.bar\n// → foo\n```\n或者，去展现你对JavaScript 的爱，你可以做得更好：\n![](https://tva2.sinaimg.com/large/006qRazegw1f7fbn6xey4j30di0ca409.jpg)\nYes，你可以无限的扩展这个对象(大概直到你的浏览器崩溃).\n\n## 使用严格模式(`use strict`)\n严格的使用`use strict`！这只不过是(译者注:这里原作者可能是想表达`不仅仅是`)在你的代码脚本中添加字符串而已。\n举个栗子：\n```js\n// This is bad, since you do create a global without having anyone to tell you\n(function () {\n   a = 42;\n   console.log(a);\n   // → 42\n})();\nconsole.log(a);\n// → 42\n```\n使用`use strict`，你可以得到更多的确切的错误：\n```js\n(function () {\n   \"use strict\";\n   a = 42;\n   // Error: Uncaught ReferenceError: a is not defined\n})();\n```\n你可能会奇怪，为什么不能将`use strict` 写在函数体外。当然，这是可以的，但它将会应用为全局的范围。这仍然是不错的，但如果你的代码中含有来自其他库的代码，这也会受其影响，或者你把所有的东西都绑定在一个文件里。\n\n## 严格相等(`Strict equal`)\n这是短的。如果你使用`==`对比`a`和`b`(像在其他编程语言)，在 JavaScript 中，你可能这种非常奇怪的运行方式：如果你有一个字符串和一个数字，他们是相等的(`==`):\n```js\n\"42\" == 42\n// → true\n```\n由于显而易见的原因(如 `验证(validations)`)，最好使用严格相等(`===`)：\n```js\n\"42\" === 42\n// → false\n```\n\n## 使用断言(`&&`/`||`)\n根据你的需要，你可以使用逻辑运算符是你的代码更简短。\n**默认值:**\n  \n```js\n\"\" || \"foo\"\n// → \"foo\"\n\nundefined || 42\n// → 42\n\n// Note that if you want to handle 0 there, you need\n// to check if a number was provided:\nvar a = 0;\na || 42\n// → 42\n\n// This is a ternary operator—works like an inline if-else statement\nvar b = typeof a === \"number\" ? a : 42;\n// → 0\n```\n\n检查是否是一个真正的`if`表达式，你可以简单的这么做：\n```js\nexpr && doSomething();\n\n// Instead of:\nif (expr) {\n\tdoSomething();\n}\n```\n\n你可能会不赞同我这里的写法，但是这是比较理想的。如果你不想用这种方式丑化你的代码，但那些 JavaScript 压缩工具实际上会这么做。\n\n如果你问我，尽管这些代码比较短，但它仍然是人类可读的。\n\n## 类型转换\n有几种方式来转换这些东西，这取决于你想怎么做。最常见的方式是：\n```js\n// From anything to a number\n\nvar foo = \"42\";\nvar myNumber = +foo; // shortcut for Number(foo)\n// → 42\n\n// Tip: you can convert it directly into a negative number\nvar negativeFoo = -foo; // or -Number(foo)\n// → -42\n\n// From object to array\n// Tip: `arguments` is an object and in general you want to use it as array\nvar args = { 0: \"foo\", 1: \"bar\", length: 2 };\nArray.prototype.slice.call(args)\n// → [ 'foo', 'bar' ]\n\n// Anything to boolean\n/// Non non p is a boolean p\nvar t = 1;\nvar f = 0;\n!!t\n// → true\n!!f\n// → false\n\n/// And non-p is a boolean non-p\n!t\n// → false\n!f\n// → true\n\n// Anything to string\nvar foo = 42;\n\"\" + foo // shortcut for String(foo)\n// → \"42\"\n\nfoo = { hello: \"world\" };\nJSON.stringify(foo);\n// → '{ \"hello\":\"world\" }'\n\nJSON.stringify(foo, null, 4); // beautify the things\n// →\n// '{\n//    \"hello\": \"world\"\n// }'\n\n// Note you cannot JSON.stringify circular structures\nJSON.stringify(window);\n// ⚠ TypeError: JSON.stringify cannot serialize cyclic structures.\n```\n\n## 代码样式/样式指南\n在新项目中，遵循整个文件相同的代码风格。对于现有的，采用已经存在的代码风格，除非你只是决定改变它(提示：同你的合作者商讨)。即使你创建并记录你的代码风格，请始终遵循它。\n\n这里是不同的现有的代码样式：\n- [Google JavaScript Style Guide](https://google.github.io/styleguide/javascriptguide.xml)\n- [airbnb/javascript](https://github.com/airbnb/javascript)\n- ... there are others too\n- [my style guide](https://github.com/IonicaBizau/code-style)\n\n## 附加提示\n其他重要的 JavaScript 最佳实践，你应该记住的是使用工具帮助你格式化你的代码。这是其中的一些：\n- [js-beautify](https://github.com/beautify-web/js-beautify): Beautifies your code\n- [UglifyJS(2)](https://github.com/mishoo/UglifyJS2): Uglifies/minimifies your code\n- [jshint](https://github.com/jshint/jshint): Detects errors/potential problems in your JavaScript code\n- [jscs](http://jscs.info/): A configurable style guide checker\n\n最后一件事：[Debug your Code](https://www.codementor.io/learn-programming/what-to-do-when-your-website-is-broken) \n\nHappy programming!\n\n\n-----------------------------------------------------------------  \n\n致谢：[@屠夫][tufu] 、[@QistChan][qistchan]、[@nApolin][napolin]、[@Ant][ant]\n\n-----------------------------------------------------------------\n\n\n[browserify]:http://browserify.org/\n[web development guide]:https://www.codementor.io/learn-development/javascript-css-html-tutorial-front-end-development-tools\n[tufu]:https://www.haomwei.com\n[qistchan]:https://qistchan.com\n[napolin]:https://napolin.cn\n[ant]:http://www.antzone.cn\n\n\n\n","tags":["JavaScript","前端","译文","技巧"]},{"title":"MarkDown 不完全指南","url":"/2016/MarkDown-incomplete-Guide/","content":"![](https://tva2.sinaimg.com/large/0060lm7Tgw1f456ew31f7j30jg05kdfu.jpg)\n# Markdown\nA markdown example shows how to write a markdown file. This document integrates core syntax and extensions (GMF).\n\n \n## Block Elements\n### Paragraphs and Line Breaks\n#### Paragraphs\nHTML Tag: `<p>`\n\nOne or more blank lines. (A blank line is a line containing nothing but **spaces** or **tabs** is considered blank.)\n\nCode:\n```\nThis will be \ninline.\n\nThis is second paragraph.\n```\n\nPreview:\n***\nThis will be \ninline.\n\nThis is second paragraph.\n***\n#### Line Breaks\nHTML Tag: `<br />`\n\nEnd a line with **two or more spaces**.\n\nCode:\n```\nThis will be not  \ninline.\n```\nPreview:\n***\nThis will be not  \ninline.\n***\n\n### Headers\nMarkdown supports two styles of headers, Setext and atx.\n#### Setext\nHTML Tags: `<h1>`, `<h2>`\n\n“Underlined” using **equal signs (=)** as `<h1>` and **dashes (-)** as `<h2>` in any number.\n\nCode:\n```\nThis is an H1\n=============\nThis is an H2\n-------------\n```\nPreview:\n***\nThis is an H1\n=============\n\nThis is an H2\n-------------\n***\n#### atx\nHTML Tags: `<h1>`, `<h2>`, `<h3>`, `<h4>`, `<h5>`, `<h6>`\n\nUses 1-6 **hash characters (#)** at the start of the line, corresponding to `<h1>` - `<h6>`.\n\nCode:\n```\n# This is an H1\n## This is an H2\n###### This is an H6\n```\nPreview:\n***\n# This is an H1\n## This is an H2\n###### This is an H6\n***\nOptionally, you may “close” atx-style headers. The closing hashes **don’t need to match** the number of hashes used to open the header.\n\nCode:\n```\n# This is an H1 #\n## This is an H2 ##\n### This is an H3 ######\n```\nPreview:\n***\n# This is an H1 #\n## This is an H2 ##\n### This is an H3 ######\n***\n\n### Blockquotes\nHTML Tag: `<blockquote>`\n\nMarkdown uses email-style **>** characters for blockquoting. It looks best if you hard wrap the text and put a > before every line.\n\nCode:\n```\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n> \n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n> id sem consectetuer libero luctus adipiscing.\n```\nPreview:\n***\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n> \n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n> id sem consectetuer libero luctus adipiscing.\n\n***\nMarkdown allows you to be lazy and only put the > before the first line of a hard-wrapped paragraph.\n\nCode:\n```\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\nid sem consectetuer libero luctus adipiscing.\n```\nPreview:\n***\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\nid sem consectetuer libero luctus adipiscing.\n\n***\nBlockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of >.\n\nCode:\n```\n> This is the first level of quoting.\n>\n> > This is nested blockquote.\n>\n> Back to the first level.\n```\nPreview:\n***\n> This is the first level of quoting.\n>\n> > This is nested blockquote.\n>\n> Back to the first level.\n\n***\nBlockquotes can contain other Markdown elements, including headers, lists, and code blocks.\n\nCode:\n```\n> ## This is a header.\n> \n> 1.   This is the first list item.\n> 2.   This is the second list item.\n> \n> Here's some example code:\n> \n>     return shell_exec(\"echo $input | $markdown_script\");\n```\nPreview:\n***\n> ## This is a header.\n> \n> 1.   This is the first list item.\n> 2.   This is the second list item.\n> \n> Here's some example code:\n> \n>     return shell_exec(\"echo $input | $markdown_script\");\n\n***\n\n### Lists\nMarkdown supports ordered (numbered) and unordered (bulleted) lists.\n#### Unordered\nHTML Tag: `<ul>`\n\nUnordered lists use **asterisks (*)**, **pluses (+)**, and **hyphens (-)**.\n\nCode:\n```\n*   Red\n*   Green\n*   Blue\n```\nPreview:\n***\n*   Red\n*   Green\n*   Blue\n\n***\nis equivalent to:\n\nCode:\n```\n+   Red\n+   Green\n+   Blue\n```\nand:\n\nCode:\n```\n-   Red\n-   Green\n-   Blue\n```\n#### Ordered\nHTML Tag: `<ol>`\n\nOrdered lists use numbers followed by periods:\n\nCode:\n```\n1.  Bird\n2.  McHale\n3.  Parish\n```\nPreview:\n***\n1.  Bird\n2.  McHale\n3.  Parish\n\n***\nIt’s possible to trigger an ordered list by accident, by writing something like this:\n\nCode:\n```\n1986. What a great season.\n```\nPreview:\n***\n1986. What a great season.\n\n***\nYou can **backslash-escape (\\\\)** the period:\n\nCode:\n```\n1986\\. What a great season.\n```\nPreview:\n***\n1986\\. What a great season.\n\n***\n#### Indented\n\n##### Blockquote\nTo put a blockquote within a list item, the blockquote’s > delimiters need to be indented:\n\nCode:\n```\n*   A list item with a blockquote:\n\n    > This is a blockquote\n    > inside a list item.\n```\nPreview:\n***\n*   A list item with a blockquote:\n\n    > This is a blockquote\n    > inside a list item.\n\n***\n##### Code Block\nTo put a code block within a list item, the code block needs to be indented twice — **8 spaces** or **two tabs**:\n\nCode:\n```\n*   A list item with a code block:\n\n        <code goes here>\n```\nPreview:\n***\n*   A list item with a code block:\n\n        <code goes here>\n\n***\n##### Nested List\nCode:\n\n```\n* A\n    * A1\n    * A2\n* B\n* C\n```\nPreview:\n***\n* A\n  * A1\n  * A2\n* B\n* C\n\n***\n### Code Blocks\nHTML Tag: `<pre>`\n\nIndent every line of the block by at least **4 spaces** or **1 tab**.\n\nCode:\n```\nThis is a normal paragraph:\n\n    This is a code block.\n```\nPreview:\n***\nThis is a normal paragraph:\n\n    This is a code block.\n***\nA code block continues until it reaches a line that is not indented (or the end of the article).\n\nWithin a code block, ***ampersands (&)*** and angle **brackets (< and >)** are automatically converted into HTML entities.\n\nCode:\n```\n<div class=\"thanclass\">\n    &copy; 2004 Foo Corporation\n</div>\n```\nPreview:\n***\n<div class=\"thanclass\">\n    &copy; 2004 Foo Corporation\n</div>\n***\nFollowing sections Fenced Code Blocks and Syntax Highlighting are extensions, you can use the other way to write the code block.\n#### Fenced Code Blocks\nJust wrap your code in \\`\\`\\` \\`\\`\\` (as shown below) and you won't need to indent it by four spaces.\n\nCode:  \n\n>Here's an example:  \n&#96;&#96;&#96;  \nfunction test() {  \n    console.log(\"notice the blank line before this function?\");  \n}   \n&#96;&#96;&#96;  \n\nPreview:\n***\nHere's an example:\n\n```\nfunction test() {\n  console.log(\"notice the blank line before this function?\");\n}\n```\n***\n#### Syntax Highlighting\nIn your fenced block, add an optional language identifier and we'll run it through syntax highlighting ([Support Languages](https://github.com/github/linguist/blob/master/lib/linguist/languages.yml)).\n\nCode:\n\n>&#96;&#96;&#96;ruby  \nrequire 'redcarpet'  \nmarkdown = Redcarpet.new(\"Hello World!\")  \nputs markdown.to_html  \n&#96;&#96;&#96;    \n\nPreview:\n***\n```ruby\nrequire 'redcarpet'\nmarkdown = Redcarpet.new(\"Hello World!\")\nputs markdown.to_html\n```\n***\n### Horizontal Rules\nHTML Tag: `<hr />`\nPlaces **three or more hyphens (-), asterisks (*), or underscores (_)** on a line by themselves. You may use spaces between the hyphens or asterisks.\n\nCode:\n```\n    * * *\n    ***\n    *****\n    - - -\n    ---------------------------------------\n    ___\n```\n\n### Table\nHTML Tag: `<table>`\n\nIt's an extension.\n\nSeparates column by **pipe (|)** and header by **dashes (-)**, and uses **colon (:)** for alignment.\n\nThe outer **pipes (|)** and alignment are optional. There are **3 delimiters** each cell at least for separating header.\n\nCode:\n```\n| Left | Center | Right |\n|:-----|:------:|------:|\n|aaa   |bbb     |ccc    |\n|ddd   |eee     |fff    |\n\n A | B \n---|---\n123|456\n\n\nA |B \n--|--\n12|45\n```\nPreview:\n***\n| Left | Center | Right |\n|:-----|:------:|------:|\n|aaa   |bbb     |ccc    |\n|ddd   |eee     |fff    |\n\n A | B \n---|---\n123|456\n\nA |B \n--|--\n12|45\n***\n## Span Elements\n### Links\nHTML Tag: `<a>`\n\nMarkdown supports two style of links: inline and reference.\n\n#### Inline\nInline link format like this: `[Link Text](URL \"Title\")`\n\nTitle is optional.\n\nCode:\n```\n    This is [an example](http://example.com/ \"Title\") inline link.\n    \n    [This link](http://example.net/) has no title attribute.\n```\nPreview:\n***\nThis is [an example](http://example.com/ \"Title\") inline link.\n\n[This link](http://example.net/) has no title attribute.\n***\nIf you’re referring to a local resource on the same server, you can use relative paths:\n\nCode:\n```\n    See my [Tags](/tags/) page for details. \n```\nPreview:\n***\nSee my [Tags](/tags/) page for details. \n***\n#### Reference\nYou could predefine link references. Format like this: `[id]: URL \"Title\"`\n\nTitle is also optional. And the you refer the link, format like this: `[Link Text][id]`\n\nCode:\n```\n    [id]: http://example.com/  \"Optional Title Here\"\n    This is [an example][id] reference-style link.\n```\nPreview:\n***\n[baidu]: https://baidu.com/  \"这里是百度\"\nThis is [点我跳转到百度][baidu] reference-style link.\n***\nThat is:\n\n* Square brackets containing the link identifier (**not case sensitive**, optionally indented from the left margin using up to three spaces);\n* followed by a colon;\n* followed by one or more spaces (or tabs);\n* followed by the URL for the link;\n* The link URL may, optionally, be surrounded by angle brackets.\n* optionally followed by a title attribute for the link, enclosed in double or single quotes, or enclosed in parentheses.\n\nThe following three link definitions are equivalent:\n\nCode:\n```\n    [foo]: http://example.com/  \"Optional Title Here\"\n    [foo]: http://example.com/  'Optional Title Here'\n    [foo]: http://example.com/  (Optional Title Here)\n    [foo]: <http://example.com/>  \"Optional Title Here\"\n```\nUses an empty set of square brackets, the link text itself is used as the name.\n\nCode:\n```\n    [Google]: http://google.com/\n    [Google][]\n```\nPreview:\n***\n[Google]: http://google.com/\n[Google][]\n***\n### Emphasis\nHTML Tags: `<em>`, `<strong>`\n\nMarkdown treats **asterisks (*)** and **underscores (_)** as indicators of emphasis. **One delimiter** will be  `<em>`; **double delimiters* will be `<strong>`.\n\nCode:\n```\n    *single asterisks*\n\n    _single underscores_\n\n    **double asterisks**\n\n    __double underscores__\n```\nPreview:\n***\n*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__\n***\nBut if you surround an * or _ with spaces, it’ll be treated as a literal asterisk or underscore.\n\nYou can backslash escape it:\n\nCode:\n```\n    *this text is surrounded by literal asterisks*\n```\nPreview:\n***\n\\*this text is surrounded by literal asterisks\\*\n***\n### Code\nHTML Tag: `<code>`\n\nWraps it with **backtick quotes (`)**.\n\nCode:\n```\n    Use the `printf()` function.\n```\nPreview:\n***\nUse the `printf()` function.\n***\nTo include a literal backtick character within a code span, you can use **multiple backticks** as the opening and closing delimiters:\n\nCode:\n```\n    ``There is a literal backtick (`) here.``\n```\nPreview:\n***\n``There is a literal backtick (`) here.``\n***\nThe backtick delimiters surrounding a code span may include spaces — one after the opening, one before the closing. This allows you to place literal backtick characters at the beginning or end of a code span:\n\nCode:\n```\n    A single backtick in a code span: `` ` ``\n\n    A backtick-delimited string in a code span: `` `foo` ``\n```\nPreview:\n***\nA single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``\n***\n### Images\nHTML Tag: `<img />`\n\nMarkdown uses an image syntax that is intended to resemble the syntax for links, allowing for two styles: inline and reference.\n#### Inline\n\nInline image syntax looks like this: `![Alt text](URL \"Title\")`\n\nTitle is optional.\n\nCode:\n```\n    ![Alt text](/path/to/img.jpg)\n\n    ![Alt text](/path/to/img.jpg \"Optional title\")\n```\nPreview:\n***\n![Alt text](/images/favicon.png)\n\n![Alt text](/images/favicon.png \"Optional title\")\n***\nThat is:\n\n* An exclamation mark: !;\n* followed by a set of square brackets, containing the alt attribute text for the image;\n* followed by a set of parentheses, containing the URL or path to the image, and an optional title attribute enclosed in double or single quotes.\n\n#### Reference\nReference-style image syntax looks like this: `![Alt text][id]`\n\nCode:\n```\n    [img id]: url/to/image  \"Optional title attribute\"\n    ![Alt text][img id]\n```\nPreview:\n***\n[img id]: /images/favicon.png  \"Optional title attribute\"\n![Alt text][img id]\n***\n### Strikethrough\nHTML Tag: `<del>`\n\nIt's an extension.\n\nGFM adds syntax to strikethrough text.\n\nCode:\n```\n~~Mistaken text.~~\n```\nPreview:\n***\n~~Mistaken text.~~\n***\n## Miscellaneous\n### Automatic Links\nMarkdown supports a shortcut style for creating “automatic” links for URLs and email addresses: simply surround the URL or email address with angle brackets. \n\nCode:\n```\n    <http://example.com/>\n    \n    <address@example.com>\n```\nPreview:\n***\n<http://example.com/>\n\n<address@example.com>\n***\nGFM will autolink standard URLs.\n\nCode:\n```\nhttps://github.com/xcss\n```\nPreview:\n***\nhttps://github.com/xcss\n***\n\n### Backslash Escapes\nMarkdown allows you to use backslash escapes to generate literal characters which would otherwise have special meaning in Markdown’s formatting syntax.\n\nCode:\n```\n    \\*literal asterisks\\*\n```\nPreview:\n***\n\\*literal asterisks\\*\n***\nMarkdown provides backslash escapes for the following characters:\n\nCode:\n```\n    \\   backslash\n    `   backtick\n    *   asterisk\n    _   underscore\n    {}  curly braces\n    []  square brackets\n    ()  parentheses\n    #   hash mark\n    +   plus sign\n    -   minus sign (hyphen)\n    .   dot\n    !   exclamation mark\n```\n## Inline HTML\nFor any markup that is not covered by Markdown’s syntax, you simply use HTML itself. There’s no need to preface it or delimit it to indicate that you’re switching from Markdown to HTML; you just use the tags.\n\nCode:\n```\n    This is a regular paragraph.\n\n    <table>\n        <tr>\n            <td>Foo</td>\n        </tr>\n    </table>\n\n    This is another regular paragraph.\n```\nPreview:\n***\nThis is a regular paragraph.\n<table>\n    <tr>\n        <td>Foo</td>\n    </tr>\n</table>\nThis is another regular paragraph.\n***\nNote that Markdown formatting syntax is **not processed within block-level HTML tags**. \n\nUnlike block-level HTML tags, Markdown syntax is **processed within span-level tags**.\n\nCode:\n```\n    <span>**Work**</span>\n    \n    <div>\n        **No Work**\n    </div>\n```\nPreview:\n***\n<span>**Work**</span>\n\n<div>\n  **No Work**\n</div>\n***\n\n> 参考文档: http://www.markdown.cn/\n","tags":["MarkDown","Guide"],"categories":["学习笔记"]},{"title":"响应式设计 (Responsive Design) 中常用的媒体查询","url":"/2016/commonly-used-media-queries/","content":"![](https://tva2.sinaimg.com/large/0060lm7Tgw1f456ew2yobj30jg05kwee.jpg)\n\n\n\n现在Web朝着响应式的趋势发展，媒体查询在创建响应式网站中起到了主要作用。\n\n没有媒体查询几乎不能实现响应式设计，利用媒体查询，我们可以针对特定的设备，如显示器、智能手机和平板，写CSS。\n\n> 媒体查询是响应式设计的核心\n\n在这篇文章中我将分享一些到目前为止我收集到的常用媒体查询。在一些示例中，我可能是错误的，但是不用担心，因为我针对这个开通了评论功能。我把它们分为`显示器媒体查询`、`智能手机媒体查询`和`平板媒体查询` \n\n \n\n# 显示器媒体查询 \n\n显示器媒体查询是以屏幕大小为基础划分的 \n\n## 640px\n```css\n@media screen and (max-width: 640px){\n    /*some rules*/\n}\n```\n\n## 800px\n```css\n@media screen and (max-width: 800px){\n    /*some rules*/\n}\n```\n\n## 1024px\n```css\n@media screen and (max-width: 1024px){\n    /*some rules*/\n}\n```\n\n# 智能手机媒体查询\n\n适用于大部分主流智能手机 \n\n## iPhone(2G-4S)\n```css\n/*Landscape Mode*/\n@media screen and (max-device-width: 480px) and (orientation:landscape){\n    /*some rules*/\n}\n/* Portrait Mode */\n@media screen and (max-device-width: 320px) and (orientation:portrait){\n    /*some rules*/\n}\n```\n\n## iPhone 4\n```css\n@media only screen and (-webkit-min-device-pixel-ratio : 1.5),\nonly screen and (min-device-pixel-ratio : 1.5){\n    /*some rules*/\n}\n```\n\n## iPhone 5\n```css\n@media only screen\nand (min-device-width : 320px)\nand (max-device-width : 568px){\n    /*some rules*/\n}\n```\n\n## iPhone 6\n```css\n@media only screen and (min-device-width: 375px) and (max-device-width: 667px)\nand (orientation : portrait) {\n    /*iPhone 6 Portrait*/\n}\n@media only screen and (min-device-width: 375px) and (max-device-width: 667px)\n and (orientation : landscape) {\n    /*iPhone 6 landscape*/\n}\n@media only screen and (min-device-width: 414px) and (max-device-width: 736px)\nand (orientation : portrait) {\n    /*iPhone 6+ Portrait*/\n}\n@media only screen and (min-device-width: 414px) and (max-device-width: 736px)\nand (orientation : landscape) {\n    /*iPhone 6+ landscape*/\n}\n@media only screen and (max-device-width: 640px),\n only screen and (max-device-width: 667px),\nonly screen and (max-width: 480px){\n    /*iPhone 6 and iPhone 6+ portrait and landscape*/\n}\n@media only screen and (max-device-width: 640px),\nonly screen and (max-device-width: 667px),\nonly screen and (max-width: 480px) and (orientation : portrait){\n    /*iPhone 6 and iPhone 6+ portrait*/\n}\n@media only screen and (max-device-width: 640px),\nonly screen and (max-device-width: 667px),\nonly screen and (max-width: 480px) and (orientation : landscape){\n    /*iPhone 6 and iPhone 6+ landscape*/\n}\n```\n\n## HTC Evo，BlackBerry Torch，HTC Thunderbolt，HD2 \n```css\n@media screen and (max-device-width: 480px){\n    /*some rules*/\n}\n```\n\n# 平板媒体查询\n\n## iPad / iPad 2 / iPad 3\n```css\n/* Landscape Mode */\n@media (max-device-width: 1024px) and (orientation: landscape){\n    /*some rules*/\n}\n/* Portrait Mode */\n@media (max-device-width: 768px) and (orientation: portrait){\n    /*some rules*/\n}\n```\n\n## iPad Mini \n```css\n@media only screen\nand (min-device-width : 768px)\nand (max-device-width : 1024px)\nand (-webkit-min-device-pixel-ratio: 1){\n    /*some rules*/\n}\n```\n\n## Samsung Galaxy Tab 10.1 / Motorola Xoom / Lenovo Thinkpad Tablet / Sony Tablet S\n```css\n/* Landscape Mode */\n@media (max-device-width: 1280px) and (orientation: landscape){\n    /*some rules*/\n}\n/* Portrait Mode */\n@media (max-device-width: 800px) and (orientation: portrait){\n    /*some rules*/\n}\n```\n\n## HTC Flyer / BlackBerry PlayBook\n```css\n/* Landscape Mode */\n@media (max-device-width: 1024px) and (orientation: landscape){\n    /*some rules*/\n}\n/* Portrait Mode */\n@media (max-device-width: 600px) and (orientation: portrait){\n    /*some rules*/\n}\n```\n\n## HP TouchPad\n```css\n/* Landscape Mode */\n@media (max-device-width: 1024px) and (orientation: landscape){\n    /*some rules*/\n}\n/* Portrait Mode */\n@media (max-device-width: 768px) and (orientation: portrait){\n    /*some rules*/\n}\n```\n\n## T-Mobile G-Slate\n```css\n/* Landscape Mode */\n@media (max-device-width: 1280px) and (orientation: landscape){\n    /*some rules*/\n}\n/* Portrait Mode */\n@media (max-device-width: 768px) and (orientation: portrait){\n    /*some rules*/\n}\n```\n\n## ViewSonic ViewPad 10\n```css\n/* Landscape Mode */\n@media (max-device-width: 1024px) and (orientation: landscape){\n    /*some rules*/\n}\n/* Portrait Mode */\n@media (max-device-width: 600px) and (orientation: portrait){\n    /*some rules*/\n}\n```\n\n## Dell Streak 7\n```css\n/* Landscape Mode */\n@media (max-device-width: 800px) and (orientation: landscape){\n    /*some rules*/\n}\n/* Portrait Mode */\n@media (max-device-width: 400px) and (orientation: portrait){\n    /*some rules*/\n}\n```\n\n## ASUS Eee Pad Transformer\n```css\n/* Landscape Mode */\n@media (max-device-width: 1080px) and (orientation: landscape){\n    /*some rules*/\n}\n/* Portrait Mode */\n@media (max-device-width: 800px) and (orientation: portrait){\n    /*some rules*/\n}\n```\n\n## 其他参考文档\n1. [七个高度有效的媒体查询技巧](http://www.w3cplus.com/css3/7-habits-of-highly-effective-media-queries.html) \n2. [iPads和iPhones的Media Queries](http://www.w3cplus.com/css3/css-media-queries-for-iPads-and-iPhones.html )\n3. [media-queries-for-standard-devices](https://css-tricks.com/snippets/css/media-queries-for-standard-devices/ )\n\n---------------- \n> 本文转载自[淡忘~浅思](http://www.ido321.com/),略有删改,侵权即删.  \n原文链接: [Some Media Queries for Responsive Design](http://www.xpertdeveloper.com/2012/08/media-queries-for-responsive-design/)  \n译文链接: [【译】Responsive Design常用的媒体查询](http://www.ido321.com/1540.html)   \n\n\n\n\n\n\n\n\n\n\n\n","tags":["Media Query","响应式","媒体查询"],"categories":["学习笔记"]},{"title":"生成 SSH Key 免密码提交 GitHub","url":"/2015/generating-ssh-key/","content":"![](https://tva2.sinaimg.com/large/0060lm7Tgw1f456ew154kj30jg05k745.jpg)\n之前上传文件到 GitHub 的时候，一直都是用的账号密码登录，每次提交都弹个窗体出来，感觉烦死了。。。今天有空，就来捣鼓下 `SSH Key`。\n\n \n\n### Step1. 检查是否已经存在 SSH Key \n运行 `Git Bush` 客户端，执行以下代码： \n```\n$ ls -al ~/.ssh \n# 如果存在，将会列出.ssh 目录下的所有文件\n```\n\n```\n# 如果不存在则会给出如下提示\nls: cannot open directory /Users/you/.ssh: Permission denied\n```\n\n检查列出来的目录，看看是否已经有了一个 `SSH Key`。默认情况下，key 的文件名是下列之一： \n    > id_dsa.pub \n    > id_ecdsa.pub \n    > id_ed25519.pub \n    > id_rsa.pub \n\n> 如果已经存在(如 `id_rsa` 和 `id_rsa.pub`)而且你想使用已经存在的密钥对直接连接 GitHub ，那么可以跳过 **Step2**，直接进入 **Step3** \n\n### Step2. 生成 SSH Key \n复制下面的代码(`记得请将email修改成自己的email地址`)： \n```\n$ ssh-keygen -t rsa -b 4096 -C \"your_name@example.com\" \nGenerating public/private rsa key pair.\n```\n\n这里 GitHub 的建议是保持默认，所以只需要按 `Enter` 继续： \n```\nEnter file in which to save the key (/Users/you/.ssh/id_rsa): [Press Enter]\n```\n\n如果存在，将会提示是否覆盖： \n```\n/Users/you/.ssh/id_rsa already exists.\nOverwrite (y/n)?\n```\n\n继续后会提示输入密码： \n```\nEnter passphrase (empty for no passphrase): [Type a passphrase]\nEnter same passphrase again: [Type passphrase again]\n```\n\n然后你就会得到你的 `SSH Key` 的指纹，看起来像下面的代码： \n```\nYour identification has been saved in /Users/you/.ssh/id_rsa.\nYour public key has been saved in /Users/you/.ssh/id_rsa.pub.\nThe key fingerprint is:\n01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n```\n\n### Step3. 添加 SSH Key 到 GitHub \n先拷贝 `id_rsa.pub` 文件的内容，可以用编辑器打开然后复制，也可以用 git 命令复制： \n```\n$ clip < ~/.ssh/id_rsa.pub\n```\n\n进入 GitHub [账户设置](https://GitHub.com/settings)，点击左边 [SSH Key](https://GitHub.com/settings/ssh) ，点击 `Add SSH key` ，粘贴刚刚复制的内容，然后保存。 \n输入 GitHub 账户的密码就能看到刚刚添加的 SSH Key 了。 \n\n### Step4. 测试是否添加成功 \n在 `Git Bush` 中输入下面的代码，然后回车 \n```\n$ ssh -T git@GitHub.com\n# Attempts to ssh to GitHub\n```\n\n会得到如下的指纹提示：键入`yes` \n```\nThe authenticity of host 'GitHub.com (207.97.227.239)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n```\n\n如果出现下面的提示，恭喜你，验证成功。 \n```\nHi username! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n> 如果你看到的是 `access denied(拒绝访问)` ，可以[点击这里](https://help.GitHub.com/articles/error-permission-denied-publickey) ，查看解决办法。  \n\n然后将https替换成ssh重新下载下代码，就OK了~~~\n\n***Good Luck***  \n\n** 参考文档 **\n1. [Generating SSH keys](https://help.GitHub.com/articles/generating-ssh-keys/) \n\n\n-------------------------------\n","tags":["GitHub","SSH Key","免密码"],"categories":["学习笔记"]},{"title":"常用Meta整理","url":"/2015/html-meta/","content":"\n## 概要  \n\n<blockquote class=\"blockquote-center\">标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。-- [W3School](http://www.w3school.com.cn/)  </blockquote>\n\n### 必要属性  \n\n| 属性 | 值 | 描述 |\n| -- | -- | --- |\n| content | some text | 定义与http-equiv或name属性相关的元信息 |  \n\n### 可选属性 \n\n| 属性 | 值 | 描述 |\n| -- | -- | --- |\n| http-equiv | content-type / expire / refresh / set-cookie  |  把content属性关联到HTTP头部。|\n| name | author / description / keywords / generator / revised / others | 把 content 属性关联到一个名称。|\n| content | some text | 定义用于翻译 content 属性值的格式。| \n \n\n## SEO优化 \n\n[参考文档](http://msdn.microsoft.com/zh-cn/library/ff724016)  \n\n - ****页面关键词**** , 每个网页应具有描述该网页内容的一组唯一的关键字。\n    使用人们可能会搜索，并准确描述网页上所提供信息的描述性和代表性关键字及短语。标记内容太短，则搜索引擎可能不会认为这些内容相关。另外标记不应超过 874 个字符。\n```\n<meta name=\"keywords\" content=\"your tags\" />\n```\n - ****页面描述**** , 每个网页都应有一个不超过 150 个字符且能准确反映网页内容的描述标签。\n```\n<meta name=\"description\" content=\"150 words\" />\n```\n - ****搜索引擎索引方式**** , robotterms是一组使用逗号(,)分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。确保正确使用nofollow和noindex属性值。\n```\n<meta name=\"robots\" content=\"index,follow\" />\n<!--\n        all：文件将被检索，且页面上的链接可以被查询；\n        none：文件将不被检索，且页面上的链接不可以被查询；\n        index：文件将被检索；\n        follow：页面上的链接可以被查询；\n        noindex：文件将不被检索；\n        nofollow：页面上的链接不可以被查询。\n-->\n```\n - ****页面重定向和刷新**** : content内的数字代表时间（秒），既多少时间后刷新。如果加url,则会重定向到指定网页（搜索引擎能够自动检测，也很容易被引擎视作误导而受到惩罚）。\n ```\n<meta http-equiv=\"refresh\" content=\"0;url=\" />\n ```\n - ****其他**** \n```\n<meta name=\"author\" content=\"author name\" /> <!-- 定义网页作者 -->\n<meta name=\"google\" content=\"index,follow\" />\n<meta name=\"googlebot\" content=\"index,follow\" />\n<meta name=\"verify\" content=\"index,follow\" /> \n```\n\n## 移动设备 \n\n - ****viewport**** ：能优化移动浏览器的显示。如果不是响应式网站，不要使用initial-scale或者禁用缩放。\n    大部分4.7-5寸设备的viewport宽设为360px；5.5寸设备设为400px；iphone6设为375px；ipone6 plus设为414px。\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no\"/>\n<!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边  -->\n```\n    1. width：宽度（数值 / device-width）（范围从200 到10,000，默认为980 像素）\n    2. height：高度（数值 / device-height）（范围从223 到10,000）\n    3. initial-scale：初始的缩放比例 （范围从>0 到10）\n    4. minimum-scale：允许用户缩放到的最小比例\n    5. maximum-scale：允许用户缩放到的最大比例\n    6. user-scalable：用户是否可以手动缩 (no,yes)\n    7. <del>minimal-ui</del>：可以在页面加载时最小化上下状态栏。（已弃用）\n    \n\n>注意:很多人使用initial-scale=1到非响应式网站上，这会让网站以100%宽度渲染，用户需要手动移动页面或者缩放。\n 如果和initial-scale=1同时使用user-scalable=no或maximum-scale=1，则用户将不能放大/缩小网页来看到全部的内容。\n\n - ****WebApp全屏模式**** : 伪装app，离线应用。  \n```        \n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\" />\n```\n - ****添加到主屏后的标题**** \n```\n <meta name=\"apple-mobile-web-app-title\" content=\"标题\">\n```\n - ****忽略数字自动识别为电话号码**** \n```\n<meta content=\"telephone=no\" name=\"format-detection\" /> \n```\n - ****忽略识别邮箱****\n```\n<meta content=\"email=no\" name=\"format-detection\" />\n```\n - ****添加智能 App 广告条 Smart App Banner**** ：告诉浏览器这个网站对应的app，并在页面上显示下载banner(如下图)。  \n    [参考文档](https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html)\n```\n<meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\">\n```\n![看图片顶部](https://tva2.sinaimg.com/large/006qRazegw1f40yqh6luyj306y0cd0t8.jpg) \n - ****其他****  \n    [参考文档](http://fex.baidu.com/blog/2014/10/html-head-tags )\n```\n<!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n<meta name=\"HandheldFriendly\" content=\"true\">\n<!-- 微软的老式浏览器 -->\n<meta name=\"MobileOptimized\" content=\"320\">\n<!-- uc强制竖屏 -->\n<meta name=\"screen-orientation\" content=\"portrait\">\n<!-- QQ强制竖屏 -->\n<meta name=\"x5-orientation\" content=\"portrait\">\n<!-- UC强制全屏 -->\n<meta name=\"full-screen\" content=\"yes\">\n<!-- QQ强制全屏 -->\n<meta name=\"x5-fullscreen\" content=\"true\">\n<!-- UC应用模式 -->\n<meta name=\"browsermode\" content=\"application\">\n<!-- QQ应用模式 -->\n<meta name=\"x5-page-mode\" content=\"app\">\n<!-- windows phone 点击无高光 -->\n<meta name=\"msapplication-tap-highlight\" content=\"no\">\n```\n\n## 网页相关 \n\n```\n<meta charset='utf-8' />\n```\n- ****优先使用 IE 最新版本和 Chrome****\n```\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n<!-- 关于X-UA-Compatible -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=6\" ><!-- 使用IE6 -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=7\" ><!-- 使用IE7 -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\" ><!-- 使用IE8 -->\n```\n- ****浏览器内核控制****：国内浏览器很多都是双内核（webkit和Trident），webkit内核高速浏览，IE内核兼容网页和旧版网站。而添加meta标签的网站可以控制浏览器选择何种内核渲染。   \n[参考文档](http://se.360.cn/v6/help/meta.html )\n```\n<meta name=\"renderer\" content=\"webkit|ie-comp|ie-stand\">\n```\n    国内双核浏览器默认内核模式如下：\n    1. 搜狗高速浏览器、QQ浏览器：IE内核（兼容模式）\n    2. 360极速浏览器、遨游浏览器：Webkit内核（极速模式）\n- ****禁止浏览器从本地计算机的缓存中访问页面内容****：这样设定，访问者将无法脱机浏览。\n```\n<meta http-equiv=\"Pragma\" content=\"no-cache\">\n```\n- ****Windows 8****\n```\n<meta name=\"msapplication-TileColor\" content=\"#000\"/> <!-- Windows 8 磁贴颜色 -->\n<meta name=\"msapplication-TileImage\" content=\"icon.png\"/> <!-- Windows 8 磁贴图标 -->\n```\n- ****站点适配****：主要用于PC-手机页的对应关系。\n```\n<meta name=\"mobile-agent\"content=\"format=[wml|xhtml|html5]; url=url\">\n<!--\n[wml|xhtml|html5]根据手机页的协议语言，选择其中一种；\nurl=\"url\" 后者代表当前PC页所对应的手机页URL，两者必须是一一对应关系。\n-->\n```\n- ****转码申明****：用百度打开网页可能会对其进行转码（比如贴广告），避免转码可添加如下meta\n```\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n```\n\n## 其他参考文档\n1. [COMPLETE LIST OF HTML META TAGS](http://code.lancepollard.com/complete-list-of-html-meta-tags/) \n2. [W3C META TAGS](http://www.w3.org/TR/html5/document-metadata.html#the-meta-element )\n3. [METATAGES in HTML5](http://www.html-5.com/metatags/ )\n4. [MDN META TAGS](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta )\n\n---------------------\n\n> 本文转载自SegmentFault,原文略有删改,侵权即删.  \n原文链接：[常用meta整理](http://segmentfault.com/a/1190000002407912)   \n原文作者：[Ciaocc](http://segmentfault.com/u/ciaocc ) \n\n\n\n\n","tags":["前端","meta","html"],"categories":["学习笔记"]},{"title":"无题","url":"/2015/nothing/","content":"![](https://tva2.sinaimg.com/large/006qRazegw1f41pqo797oj30jg05kaa5.jpg)\n\n> 这一路走过，如岁月的枯木碾碎后，加上时光的清水，成了一纸的澄明，不管曾经的颜色是什么，一泼墨，便能渲染出隔世离空的色彩……<br>可却，再也回不到最初。\n\n","tags":["Nothing"],"categories":["生活方式"]},{"title":"前端 JavaScript 规范","url":"/2015/the-front-end-javascript-specification/","content":"\n![](https://tva2.sinaimg.com/large/006qRazegw1f41ptt98crj30jg05kmx5.jpg)\n\n## 类型\n**原始值**:相当于传值(JavaScript对象都提供了字面量)，使用字面量创建对象。  \n  - `string`\n  - `number`\n  - `boolean`\n  - `null`\n  - `undefined`\n\n```\nvar foo = 1,\n    bar = foo;\nbar = 9;\nconsole.log(foo, bar); // => 1, 9\n```\n \n**复杂类型**:相当于传引用  \n  - `object`\n  - `array`\n  - `function`\n  \n```\nvar foo = [1, 2],\n    bar = foo;\nbar[0] = 9;\nconsole.log(foo[0], bar[0]); // => 9, 9\n```\n\n## 对象\n1. 使用`字面值`创建对象  \n```\n// bad\nvar item = new Object();\n\n// good\nvar item = {};\n```\n2. 不要使用保留字 [reserved words](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words) 作为键  \n```\n// bad\nvar superman = {\n  class: 'superhero',\n  default: { clark: 'kent' },\n  private: true\n};\n\n// good\nvar superman = {\n  klass: 'superhero',\n  defaults: { clark: 'kent' },\n  hidden: true\n};\n```\n\n## 数组\n1. 使用`字面值`创建数组  \n```\n// bad\nvar items = new Array();\n\n// good\nvar items = [];\n```\n2. 如果你不知道数组的长度，使用`push`  \n```\nvar someStack = [];\n\n// bad\nsomeStack[someStack.length] = 'abracadabra';\n\n// good\nsomeStack.push('abracadabra');\n```\n3. 当你需要拷贝数组时使用`slice`  .  [jsPerf](http://jsperf.com/converting-arguments-to-an-array/7)  \n```\nvar len = items.length,\n    itemsCopy = [],\n    i;\n\n// bad\nfor (i = 0; i < len; i++) {\n  itemsCopy[i] = items[i];\n}\n\n// good\nitemsCopy = items.slice();\n```\n4. 使用`slice`将`类数组`的对象转成数组.\n```\nfunction trigger() {\n  var args = [].slice.apply(arguments);\n  ...\n}\n```\n\n## 字符串\n1. 对字符串使用单引号 `''`(因为大多时候我们的字符串。特别html会出现`\"`)\n```\n// bad\nvar name = \"Bob Parr\";\n\n// good\nvar name = 'Bob Parr';\n\n// bad\nvar fullName = \"Bob \" + this.lastName;\n\n// good\nvar fullName = 'Bob ' + this.lastName;\n```\n2. 超过80(也有规定140的，项目具体可制定)个字符的字符串应该使用字符串连接换行\n**`!!!`**: 如果过度使用，长字符串连接可能会对性能有影响. [jsPerf](http://jsperf.com/ya-string-concat) & [Discussion](https://github.com/airbnb/javascript/issues/40)  \n```\n// bad\nvar errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';\n\n// bad\nvar errorMessage = 'This is a super long error that \\\nwas thrown because of Batman. \\\nWhen you stop to think about \\\nhow Batman had anything to do \\\nwith this, you would get nowhere \\\nfast.';\n\n// good\nvar errorMessage = 'This is a super long error that ' +\n  'was thrown because of Batman.' +\n  'When you stop to think about ' +\n  'how Batman had anything to do ' +\n  'with this, you would get nowhere ' +\n  'fast.';\n```\n3. 编程时使用`join`而不是字符串连接来构建字符串，特别是IE: [jsPerf](http://jsperf.com/string-vs-array-concat/2).\n```\nvar items,\n    messages,\n    length, i;\n\nmessages = [{\n    state: 'success',\n    message: 'This one worked.'\n},{\n    state: 'success',\n    message: 'This one worked as well.'\n},{\n    state: 'error',\n    message: 'This one did not work.'\n}];\n\nlength = messages.length;\n\n// bad\nfunction inbox(messages) {\n  items = '<ul>';\n  for (i = 0; i < length; i++) {\n    items += '<li>' + messages[i].message + '</li>';\n  }\n  return items + '</ul>';\n}\n\n// good\nfunction inbox(messages) {\n  items = [];\n  for (i = 0; i < length; i++) {\n    items[i] = messages[i].message;\n  }\n  return '<ul><li>' + items.join('</li><li>') + '</li></ul>';\n}\n```\n## 函数\n1. 函数表达式:\n```\n// 匿名函数表达式\nvar anonymous = function() {\n  return true;\n};\n\n// 有名函数表达式\nvar named = function named() {\n  return true;\n};\n\n// 立即调用函数表达式\n(function() {\n  console.log('Welcome to the Internet. Please follow me.');\n})();\n```\n2. 绝对不要在一个非函数块里声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但是它们解析不同。\n3. **`注`**: ECMA-262定义把`块`定义为一组语句，函数声明不是一个语句。[阅读ECMA-262对这个问题的说明](http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97).\n```\n// bad\nif (currentUser) {\n  function test() {\n    console.log('Nope.');\n  }\n}\n\n// good\nif (currentUser) {\n  var test = function test() {\n    console.log('Yup.');\n  };\n}\n```\n4. 绝对不要把参数命名为 `arguments`, 这将会逾越函数作用域内传过来的 `arguments` 对象.\n```\n// bad\nfunction nope(name, options, arguments) {\n  // ...stuff...\n}\n\n// good\nfunction yup(name, options, args) {\n  // ...stuff...\n}\n```\n## 属性\n1. 当使用变量和特殊非法变量名时，访问属性时可以使用中括号(`.` 优先).\n```\nvar luke = {\n  jedi: true,\n  age: 28\n};\n\nfunction getProp(prop) {\n  return luke[prop];\n}\n\nvar isJedi = getProp('jedi');\n```\n## 变量\n1. 总是使用 `var` 来声明变量，如果不这么做将导致产生全局变量，我们要避免污染全局命名空间。\n```\n// bad\nsuperPower = new SuperPower();\n\n// good\nvar superPower = new SuperPower();\n```\n2. 使用一个 `var` 以及新行声明多个变量，缩进4个空格。\n```\n// bad\nvar items = getItems();\nvar goSportsTeam = true;\nvar dragonball = 'z';\n\n// good\nvar items = getItems(),\n    goSportsTeam = true,\n    dragonball = 'z';\n```\n3. 最后再声明未赋值的变量，当你想引用之前已赋值变量的时候很有用。\n```\n// bad\nvar i, len, dragonball,\n    items = getItems(),\n    goSportsTeam = true;\n\n// bad\nvar i, items = getItems(),\n    dragonball,\n    goSportsTeam = true,\n    len;\n\n// good\nvar items = getItems(),\n    goSportsTeam = true,\n    dragonball,\n    length,\n    i;\n```\n4. 在作用域顶部声明变量，避免变量声明和赋值引起的相关问题。\n```\n// bad\nfunction() {\n  test();\n  console.log('doing stuff..');\n\n  //..other stuff..\n\n  var name = getName();\n\n  if (name === 'test') {\n    return false;\n  }\n\n  return name;\n}\n\n// good\nfunction() {\n  var name = getName();\n\n  test();\n  console.log('doing stuff..');\n\n  //..other stuff..\n\n  if (name === 'test') {\n    return false;\n  }\n\n  return name;\n}\n\n// bad\nfunction() {\n  var name = getName();\n\n  if (!arguments.length) {\n    return false;\n  }\n\n  return true;\n}\n\n// good\nfunction() {\n  if (!arguments.length) {\n    return false;\n  }\n\n  var name = getName();\n\n  return true;\n}\n```\n## 条件表达式和等号\n1. 合理使用 `===` 和 `!==` 以及 `==` 和 `!=`.\n2. 合理使用表达式逻辑操作运算.\n3. 条件表达式的强制类型转换遵循以下规则：\n  - `对象` 被计算为 `true`\n  - `Undefined` 被计算为 `false`\n  - `Null` 被计算为 `false`\n  - `布尔值` 被计算为 `布尔的值`\n  - `数字` 如果是 `+0`, `-0`, or `NaN` 被计算为 `false` , 否则为 `true`\n  - `字符串` 如果是空字符串 `''` 则被计算为 `false`, 否则为 `true`\n  ```\n  if ([0]) {\n    // true\n    // An array is an object, objects evaluate to true\n  }\n  ```\n4. 使用快捷方式.\n```\n// bad\nif (name !== '') {\n  // ...stuff...\n}\n\n// good\nif (name) {\n  // ...stuff...\n}\n\n// bad\nif (collection.length > 0) {\n  // ...stuff...\n}\n\n// good\nif (collection.length) {\n  // ...stuff...\n}\n```\n5. 阅读 [Truth Equality and JavaScript](http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108) 了解更多\n\n## 块\n1. 给所有多行的块使用大括号\n```\n// bad\nif (test)\n  return false;\n\n// good\nif (test) return false;\n\n// good\nif (test) {\n  return false;\n}\n\n// bad\nfunction() { return false; }\n\n// good\nfunction() {\n  return false;\n}\n```\n## 注释\n1. 使用 `/** ... */` 进行多行注释，包括描述，指定类型以及参数值和返回值\n```\n// bad\n// make() returns a new element\n// based on the passed in tag name\n//\n// @param <String> tag\n// @return <Element> element\nfunction make(tag) {\n\n  // ...stuff...\n\n  return element;\n}\n\n// good\n/**\n * make() returns a new element\n * based on the passed in tag name\n *\n * @param <String> tag\n * @return <Element> element\n */\nfunction make(tag) {\n\n  // ...stuff...\n\n  return element;\n}\n```\n2. 使用 `//` 进行单行注释，在评论对象的上面进行单行注释，注释前放一个空行.\n```\n// bad\nvar active = true;  // is current tab\n\n// good\n// is current tab\nvar active = true;\n\n// bad\nfunction getType() {\n  console.log('fetching type...');\n  // set the default type to 'no type'\n  var type = this._type || 'no type';\n\n  return type;\n}\n\n// good\nfunction getType() {\n  console.log('fetching type...');\n\n  // set the default type to 'no type'\n  var type = this._type || 'no type';\n\n  return type;\n}\n```\n3. 如果你有一个问题需要重新来看一下或如果你建议一个需要被实现的解决方法的话需要在你的注释前面加上 `FIXME` 或 `TODO` 帮助其他人迅速理解\n```\nfunction Calculator() {\n\n  // FIXME: shouldn't use a global here\n  total = 0;\n\n  return this;\n}\n\n\nfunction Calculator() {\n\n  // TODO: total should be configurable by an options param\n  this.total = 0;\n\n  return this;\n}\n```\n4. 满足规范的文档，在需要文档的时候，可以尝试[jsdoc](http://usejsdoc.org/).\n\n## 空白\n1. 缩进、格式化能帮助团队更快得定位修复代码BUG.\n2. 将tab设为4个空格\n```\n// bad\nfunction() {\n∙∙var name;\n}\n\n// bad\nfunction() {\n∙var name;\n}\n\n// good\nfunction() {\n∙∙∙∙var name;\n}\n```\n3. 大括号前放一个空格\n```\n// bad\nfunction test(){\n  console.log('test');\n}\n\n// good\nfunction test() {\n  console.log('test');\n}\n\n// bad\ndog.set('attr',{\n  age: '1 year',\n  breed: 'Bernese Mountain Dog'\n});\n\n// good\ndog.set('attr', {\n  age: '1 year',\n  breed: 'Bernese Mountain Dog'\n});\n```\n4. 在做长方法链时使用缩进.\n```\n// bad\n$('#items').find('.selected').highlight().end().find('.open').updateCount();\n\n// good\n$('#items')\n  .find('.selected')\n    .highlight()\n    .end()\n  .find('.open')\n    .updateCount();\n\n// bad\nvar leds = stage.selectAll('.led').data(data).enter().append('svg:svg').class('led', true)\n    .attr('width',  (radius + margin) * 2).append('svg:g')\n    .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\n    .call(tron.led);\n\n// good\nvar leds = stage.selectAll('.led')\n    .data(data)\n  .enter().append('svg:svg')\n    .class('led', true)\n    .attr('width',  (radius + margin) * 2)\n  .append('svg:g')\n    .attr('transform', 'translate(' + (radius + margin) + ',' + (radius + margin) + ')')\n    .call(tron.led);\n```\n\n## 逗号\n1. 不要将逗号放前面\n```\n// bad\nvar once\n  , upon\n  , aTime;\n\n// good\nvar once,\n    upon,\n    aTime;\n\n// bad\nvar hero = {\n    firstName: 'Bob'\n  , lastName: 'Parr'\n  , heroName: 'Mr. Incredible'\n  , superPower: 'strength'\n};\n\n// good\nvar hero = {\n  firstName: 'Bob',\n  lastName: 'Parr',\n  heroName: 'Mr. Incredible',\n  superPower: 'strength'\n};\n```\n2. 不要加多余的逗号，这可能会在IE下引起错误，同时如果多一个逗号某些ES3的实现会计算多数组的长度。\n```\n// bad\nvar hero = {\n  firstName: 'Kevin',\n  lastName: 'Flynn',\n};\n\nvar heroes = [\n  'Batman',\n  'Superman',\n];\n\n// good\nvar hero = {\n  firstName: 'Kevin',\n  lastName: 'Flynn'\n};\n\nvar heroes = [\n  'Batman',\n  'Superman'\n];\n```\n\n## 分号\n1. 语句结束一定要加分号\n```\n// bad\n(function() {\n  var name = 'Skywalker'\n  return name\n})()\n\n// good\n(function() {\n  var name = 'Skywalker';\n  return name;\n})();\n\n// good\n;(function() {\n  var name = 'Skywalker';\n  return name;\n})();\n```\n\n## 类型转换\n1. 在语句的开始执行类型转换.\n2. 字符串:\n```\n//  => this.reviewScore = 9;\n\n// bad\nvar totalScore = this.reviewScore + '';\n\n// good\nvar totalScore = '' + this.reviewScore;\n\n// bad\nvar totalScore = '' + this.reviewScore + ' total score';\n\n// good\nvar totalScore = this.reviewScore + ' total score';\n```\n3. 对数字使用 `parseInt` 并且总是带上类型转换的基数.，如`parseInt(value, 10)`\n```\nvar inputValue = '4';\n\n// bad\nvar val = new Number(inputValue);\n\n// bad\nvar val = +inputValue;\n\n// bad\nvar val = inputValue >> 0;\n\n// bad\nvar val = parseInt(inputValue);\n\n// good\nvar val = Number(inputValue);\n\n// good\nvar val = parseInt(inputValue, 10);\n\n// good\n/**\n * parseInt was the reason my code was slow.\n * Bitshifting the String to coerce it to a\n * Number made it a lot faster.\n */\nvar val = inputValue >> 0;\n```\n4. 布尔值:\n```\nvar age = 0;\n\n// bad\nvar hasAge = new Boolean(age);\n\n// good\nvar hasAge = Boolean(age);\n\n// good\nvar hasAge = !!age;\n```\n\n## 命名约定\n1. 避免单个字符名，让你的变量名有描述意义。\n```\n// bad\nfunction q() {\n  // ...stuff...\n}\n\n// good\nfunction query() {\n  // ..stuff..\n}\n```\n2. 当命名对象、函数和实例时使用驼峰命名规则\n```\n// bad\nvar OBJEcttsssss = {};\nvar this_is_my_object = {};\nvar this-is-my-object = {};\nfunction c() {};\nvar u = new user({\n  name: 'Bob Parr'\n});\n\n// good\nvar thisIsMyObject = {};\nfunction thisIsMyFunction() {};\nvar user = new User({\n  name: 'Bob Parr'\n});\n```\n3. 当命名构造函数或类时使用驼峰式大写\n```\n// bad\nfunction user(options) {\n  this.name = options.name;\n}\n\nvar bad = new user({\n  name: 'nope'\n});\n\n// good\nfunction User(options) {\n  this.name = options.name;\n}\n\nvar good = new User({\n  name: 'yup'\n});\n```\n4. 命名私有属性时前面加个下划线 `_`\n```\n// bad\nthis.__firstName__ = 'Panda';\nthis.firstName_ = 'Panda';\n\n// good\nthis._firstName = 'Panda';\n```\n5. 当保存对 `this` 的引用时使用 `self(python 风格)`,避免`this issue` . Angular建议使用`vm(MVVM模式中view-model)`\n```\n// good\nfunction() {\n  var self = this;\n  return function() {\n    console.log(self);\n  };\n}\n```\n\n## 存取器\n1. 属性的存取器函数不是必需的\n2. 如果你确实有存取器函数的话使用`getVal()` 和 `setVal(‘hello’)`,`java getter、setter风格`或者`jQuery风格`\n3. 如果属性是布尔值，使用`isVal()` 或 `hasVal()`\n```\n// bad\nif (!dragon.age()) {\n  return false;\n}\n\n// good\nif (!dragon.hasAge()) {\n  return false;\n}\n```\n4. 可以创建`get()`和`set()`函数，但是要保持一致\n```\nfunction Jedi(options) {\n  options || (options = {});\n  var lightsaber = options.lightsaber || 'blue';\n  this.set('lightsaber', lightsaber);\n}\n\nJedi.prototype.set = function(key, val) {\n  this[key] = val;\n};\n\nJedi.prototype.get = function(key) {\n  return this[key];\n};\n```\n## 构造器\n1. 给对象原型分配方法，而不是用一个新的对象覆盖原型，覆盖原型会使继承出现问题。\n```\nfunction Jedi() {\n  console.log('new jedi');\n}\n\n// bad\nJedi.prototype = {\n  fight: function fight() {\n    console.log('fighting');\n  },\n\n  block: function block() {\n    console.log('blocking');\n  }\n};\n\n// good\nJedi.prototype.fight = function fight() {\n  console.log('fighting');\n};\n\nJedi.prototype.block = function block() {\n  console.log('blocking');\n};\n```\n2. 方法可以返回 `this` 帮助方法可链。\n```\n// bad\nJedi.prototype.jump = function() {\n  this.jumping = true;\n  return true;\n};\n\nJedi.prototype.setHeight = function(height) {\n  this.height = height;\n};\n\nvar luke = new Jedi();\nluke.jump(); // => true\nluke.setHeight(20) // => undefined\n\n// good\nJedi.prototype.jump = function() {\n  this.jumping = true;\n  return this;\n};\n\nJedi.prototype.setHeight = function(height) {\n  this.height = height;\n  return this;\n};\n\nvar luke = new Jedi();\n\nluke.jump()\n  .setHeight(20);\n```\n3. 可以写一个自定义的`toString()`方法，但是确保它工作正常并且不会有副作用。\n```\nfunction Jedi(options) {\n  options || (options = {});\n  this.name = options.name || 'no name';\n}\n\nJedi.prototype.getName = function getName() {\n  return this.name;\n};\n\nJedi.prototype.toString = function toString() {\n  return 'Jedi - ' + this.getName();\n};\n```\n\n## 事件\n1. 当给事件附加数据时，传入一个哈希而不是原始值，这可以让后面的贡献者加入更多数据到事件数据里而不用找出并更新那个事件的事件处理器\n```\n// bad\n$(this).trigger('listingUpdated', listing.id);\n\n...\n\n$(this).on('listingUpdated', function(e, listingId) {\n  // do something with listingId\n});\n\n\n// good\n$(this).trigger('listingUpdated', { listingId : listing.id });\n\n...\n\n$(this).on('listingUpdated', function(e, data) {\n  // do something with data.listingId\n});\n```\n\n## 模块\n1. 这个文件应该以驼峰命名，并在同名文件夹下，同时导出的时候名字一致\n2. 对于公开API库可以考虑加入一个名为noConflict()的方法来设置导出的模块为之前的版本并返回它\n3. 总是在模块顶部声明 `'use strict';`，引入[JSHint规范](http://jshint.com/)\n```\n// fancyInput/fancyInput.js\n\n（function(global) {\n  'use strict';\n\n  var previousFancyInput = global.FancyInput;\n\n  function FancyInput(options) {\n    this.options = options || {};\n  }\n\n  FancyInput.noConflict = function noConflict() {\n    global.FancyInput = previousFancyInput;\n    return FancyInput;\n  };\n\n  global.FancyInput = FancyInput;\n})(this);\n```\n\n## jQuery\n1. 对于jQuery对象以`$`开头，以和原生DOM节点区分。\n```\n// bad\nvar menu = $(\".menu\");\n\n// good\nvar $menu = $(\".menu\");\n```\n2. 缓存jQuery查询\n```\n// bad\nfunction setSidebar() {\n  $('.sidebar').hide();\n\n  // ...stuff...\n\n  $('.sidebar').css({\n    'background-color': 'pink'\n  });\n}\n\n// good\nfunction setSidebar() {\n  var $sidebar = $('.sidebar');\n  $sidebar.hide();\n\n  // ...stuff...\n\n  $sidebar.css({\n    'background-color': 'pink'\n  });\n}\n```\n3. 对DOM查询使用级联的 `$('.sidebar ul')` 或 `$('.sidebar ul')`，[jsPerf](http://jsperf.com/jquery-find-vs-context-sel/16) \n4. 对有作用域的jQuery对象查询使用 `find`\n```\n// bad\n$('.sidebar', 'ul').hide();\n\n// bad\n$('.sidebar').find('ul').hide();\n\n// good\n$('.sidebar ul').hide();\n\n// good\n$('.sidebar > ul').hide();\n\n// good (slower)\n$sidebar.find('ul');\n\n// good (faster)\n$($sidebar[0]).find('ul');\n```\n5. 每个页面只使用一次document的ready事件，这样便于调试与行为流跟踪。\n```\n$(function(){\n   //do your page init.  \n});\n```\n6. 事件利用`jQuery.on`从页面分离到JavaScript文件。\n```\n// bad\n<a id=\"myLink\" href=\"#\" onclick=\"myEventHandler();\"></a>\n\n// good\n<a id=\"myLink\" href=\"#\"></a>\n\n$(\"#myLink\").on(\"click\", myEventHandler);\n```\n7. 对于Ajax使用`promise`方式。\n```\n// bad\n$.ajax({\n    ...\n    success : function(){\n    },\n    error : function(){\n    } \n})\n\n// good\n$.ajax({.\n    ..\n}).then( function( ){\n    // success\n}, function( ){\n    // error\n})\n```\n8. 利用`promise`的`deferred对象`解决延迟注册问题。\n```\nvar dtd = $.Deferred(); // 新建一个deferred对象\nvar wait = function(dtd){\n    var tasks = function(){\n        alert(\"执行完毕！\");\n        dtd.resolve(); // 改变deferred对象的执行状态\n    };\n    setTimeout(tasks,5000);\n　　return dtd;\n};\n```\n9. HTML中Style、以及JavaScript中style移到CSS中class，在HTML、JavaScript中引入class，而不是直接style。\n\n## ECMAScript 5兼容性\n尽量采用ES5方法，特别数组`map`、`filter`、`forEach`方法简化日常开发。在老式IE浏览器中引入`ES5-shim`。或者也可以考虑引入`underscore`、`lodash` 常用辅助库. \n- 参考[Kangax](https://twitter.com/kangax/)的 [ES5 compatibility table](http://kangax.github.com/es5-compat-table/)\n\n## HTML、CSS、JavaScript分离\n1. 页面DOM结构使用HTML，样式则采用CSS，动态DOM操作JavaScript。不要混用在HTML中\n分离在不同类型文件，文件link。\n2. HTML、CSS、JavaScript变量名都需要有业务价值。CSS以中划线分割的全小写命名，JavaScript则首字母小写的驼峰命名。\n3. CSS可引入Bootstrap、Foundation等出名响应式设计框架。以及SASS、LESS工具书写CSS。\n4. 对于CSS、JavaScript建议合并为单文件，减少Ajax的连接数。也可以引入AMD(Require.js)加载方式。\n5. 对于内部大部分企业管理系统，可以尝试采用前端 MVC框架组织代码。如Angular、React + flux架构、Knockout等。\n6. 对于兼容性可用[Modernizr](http://modernizr.com/)规范库辅助。\n\n## 使用jsHint\n1. 前端项目中推荐引入 [jshint](http://jshint.com/)插件来规范项目编码规范。以及一套完善的IDE配置。\n2. 注意：jshint需要引入nodejs 工具grunt或gulp插件，建议企业级nodejs npm私服。\n\n## 前端工具\n1. 前端第三方JavaScript包管理工具bower(`bower install jQuery`)，bower可以实现第三方库的依赖解析、下载、升级管理等。建议建立企业级bower私服。\n2. 前端构建工具，可以采用grunt或者gulp工具，可以实现html、css、js压缩、验证、测试，文件合并、watch和liveload等所有前端任务。建议企业级nodejs npm私服。\n3. 前端开发IDE： WebStorm( Idea )、Sublime为最佳 。项目组统一IDE。IDE统一配置很重要。\n\n\n>本文转载自[破狼](http://greengerong.github.io/blog/2015/05/09/qian-duan-javascriptgui-fan/),原文略有修改,侵权即删.\n原文链接：[前端javascript规范](http://greengerong.github.io/blog/2015/05/09/qian-duan-javascriptgui-fan/) \n原文作者：[破狼](http://greengerong.github.io/) \n","tags":["JavaScript","前端","规范"],"categories":["学习笔记"]},{"title":"你可能不知道的一些JavaScript 奇技淫巧","url":"/2015/about-javascript-spcial-technique/","content":"![](https://tva2.sinaimg.com/large/006qRazegw1f41ptt98crj30jg05kmx5.jpg)\n<blockquote class=\"blockquote-center\">这里记录一下以前学习各种书籍和文章里边出现的JS的小技巧，分享给大家，也供自己查阅，同时感谢那些发现创造和分享这些技巧的前辈和大牛们。</blockquote>\n## 遍历一个obj的属性到数组  \n```\nfunction getAttr(obj){\n     var a=[];\n     for(a[a.length] in obj);\n     return a;\n}\nconsole.log(getAttr({'name':'zhangsan','age':'20'}));//输出:['name','age']\n\n```\n乍一看可能比较蒙，不过仔细分析还是不难理解的。常见用法是`for(var key in obj)`，这里`key`初始也是`undefined`的，`a[a.length]`整体也是`undefined`，所以二者其实是等价的。  \n在`for`循环中，`obj`的属性会依次赋值给`key`，同样，也依次赋值给`a[a.length]`，这里`length`一直在变，就巧妙地挨个赋值给数组的每一个元素了。\n\n## 重复字符串(如`abc=>abcabc`)  \n```\nfunction repeat(target,n){\n    return (new Array(n+1).join(target));\n}\n```\n改进版本:  \n```\nfunction repeat(target,n){\n\treturn Array.prototype.join.call({length:n+1},target);\n\t//之所以要创建带length属性的对象，是因为调用数组原型方法时，必须是一个类数组对象，而类数组对象的条件就是length为非负整数\n}\n```\n不新建数组，而是用拥有`length`属性的对象替代，然后调用数组的`join`方法,性能提升很大.\n再改进：\n```\nvar repeat=(function(){\n\tvar join=Array.prototype.join,obj={};\n\treturn function(target,n){\n\t\tobj.length=n+1;\n\t\treturn join.call(obj,target);\n\t}\n})();\n```\n利用闭包将`对象`和`join`方法缓存起来，不用每次都新建对象和寻找方法  \n\n## for循环  \nfor循环中，当第二项为false时会终止循环，这里并不一定存在比较，可以直接赋值，如果赋值为undefined之类的值时，转成bool值也为假，因此也会终止，比如遍历数组可以写成：  \n```\nfor(var i=arr.length,element;element=arr[—-i];){…}\n```\n这里，第二项一定是`arr[--i]`而非`arr[i--]`,如果是后者的话，上来就是`undefined`，就不会执行循环体，或者`for(var i=0,element;element=arr[i++];){…}`\n\n## NaN\n`NaN`是JS中唯一不等于自己的值，因此可以用来判断一个变量是否真的为`NaN`:`a!==a`\n\n## `/`、`+`等算术运算符\n`<`/`+`等运算符会强制符号两边的表达式执行valueOf然后比较，所以如果两边是函数或者对象，而又重写了该对象的valueOf方法，就会自动执行两边的方法。如：\n```\nvar a={valueOf:function(){console.log(\"aaa\");}},b={valueOf:function(){console.log(\"bbb\");}};\n    a < b;//会输出:aaa;bbb;false \n```\n\n## 闭包 \n理解闭包需学会三个基本事实：  \n 1. JS允许你引用在当前函数意外定义的变量  \n 2. 即使外部函数已经返回，当前函数仍然可以引用在外部函数所定义的变量。这是因为JS的函数值包含里比调用它们时执行所需要的代码更多的信息  \n 3. 闭包可以更新外部变量的值。这是因为闭包存储的是外部变量的引用而非值副本。如：\n```\nfunction box(){\n\tvar val=undefined;\n\treturn {\n\t\tset:function(x){val=x;},\n\t\tget:function(){return val;}\n\t};\n}\nvar b=box();\nb.get();//“undefined”\nb.set(5);\nb.get();//5\n```\n这一点很重要，比如在函数的for循环体内返回闭包或者有闭包取for循环的计数器值，那么这个闭包取到的永远是for循环结束时i的最终值，因为闭包存储的是它的引用而非当时的值副本。\n\n## 块级作用域  \nJS没有块级作用域，因此通常情况下函数内部的所有变量都是绑定到函数作用域的，也就是说相当于都在函数一开始就声明了的，一个例外就是`try/catch`中的变量是块级的，只属于`try/catch`块。\n\n## 嵌套函数  \n众所周知，在函数内部声明函数是可以的，但是在在函数内的局部块里声明，可能会出现问题：  \n```\nfunction f(){return “global”;}\nfunction test(x){\n     function f(){return “local”}\n     var result=[];\n     if(x){\n          result.push(f());\n     }\n     result.push(f());\n     return result;\n}\ntest(true);//[“local”,”local”]\ntest(false);//[“local”]\n```\n将函数声明到if块中：\n```\nfunction f(){return “global”;}\nfunction test(x){\n     var result=[];\n     if(x){\n          function f(){return “local”}\n          result.push(f());\n     }\n     result.push(f());\n     return result;\n} \ntest(true);//?\ntest(false);//?\n```\n结果会如何呢？理论上讲，JS没有块级作用域，因此f()的作用域是整个test函数，因此合理猜测应该是与上一次输出相同，全部为”local”，可是并不是所有的JS执行环境都如此行事，有的会根据是否执行包含f的代码块来有条件地绑定函数f（绑定即意味着将该变量绑定到其最近的作用域，而赋值是发生在代码实际执行到赋值那一步的时候进行的）。  \n因此最好的办法是如果要声明嵌套函数，都在其富函数的最外层声明，要么就不要声明函数，而是使用var声明和函数表达式来实现：\n```\nfunction f(){return “global”;}\nfunction test(x){\n     var result=[];\n     if(x){\n          var g=function(){return “local”}\n          result.push(g());\n     }\n     result.push(f());\n     return result;\n}\n```\n\n## hasOwnProperty \n用js创建字典的时候，如果是利用对象的方式（因为JS对象的核心是一个字符串属性名称和属性值的映射表），会遇到一个问题就是原型污染，因为获取字典属性值的时候用`hasOwnProperty`还好，如果用`for in`遍历的话，不仅会遍历对象本身，包括它的原型，因此如果在其他地方污染了Object的原型，那么`for in`就会产生非预期的结果，这时可能会用`hasOwnProperty`来先检测该对象本身是否含有属性来避免原型污染，然而更极端的情况是连`hasOwnProperty`这个原型方法都有可能被污染。  \n避免原型污染的方法是在创建字典对象的时候用`Object.create(null)`来创建一个完全空对象，这个对象没有原型，这个方法是`ES5`的,在没有这个方法可用的时候，最好是创建字典类，然后在字典类里用数组来存储有序集合，自己维护这个集合。  \n\n## 类数组对象  \nJS中的类数组对象可以享用数组的大部分原型方法如`map`等\n类数组对象是指满足两个条件的对象：\n\t一是具备合理范围值内的length属性\n\t二是length属性大于该对象的最大索引，索引是一个合理范围的证书，它的字符串表示的是对象的一个key；\n但是数组的一个原型方法`contact`是不能被类数组对象调用的，因此需要先用`[].slice.call`把类数组对象转换为真正的数组比如`[].slice.call(arguments)`。  \n\n## 结构类型\n并不是所有时候都需要继承，继承也不是完美的，有时候会创造比他能解决的更多的问题，特别是当层次关系没那么明显的时候，这时候应该多用`结构类型`(又叫`鸭子类型`，如果它看起来像鸭子、游泳像鸭子并且叫声像鸭子，那么它就是鸭子)，用结构类型设计灵活的对象接口的时候，不需要创建类工厂来返回类的实例，而是直接返回对象，对象具备预期的方法和属性，比如：\n\n```\nSomeObj.someWidget=function(opts){\n     return {\n          a:blabla,\n          b:function(){...},\n          c:blabla\n     }\n}\n```\n## JavaScript 自动插入分号 \nJavaScript 具备自动插入分号的能力，但是自动插入分号并不是万能的，其有三条规则：\n 1. #### 只在`}`标记之前、一个或多个换行之后以及程序输入的结尾被插入\n 2. #### 分号只在随后的输入标记不能被解析时插入\n \t>!!这一点很重要,比如:\n\t a = b\n\t (fn());\n\t 是不会在`a=b`之后自动插入分号的，因为`a=b(f())`是可以被解析的，因此像`(`,`[`,`+`,`-`,`/`开头的时候，需要特别注意上一行可能不会自动插入。\n\t 还有一些情况，尽管不会出现解析错误，JS仍然会强制插入分号，这就是所谓的JS语法限制产生式。它不允许在两个字符间出现换行，最危险的就是`return`语句，如\n\t return \n{};\n \t 会被强制插入而成为\n\t  return;\n{};\n \t 类似的还有：`throw语句`、带有显示标签的`break`或着`continue`语句、后置自增或自减运算符\n 3. #### 分号不会作为分隔符在for循环空语句的头部被自动插入\n因此，最好的办法是在自己的js文件的最开始防御性地插入`;`，这样在合并js文件的时候就不会出问题了。  \n\n\n\n>本文转载自博客园,原文略有删减,侵权即删.\n原文链接：[你可能不知道的一些JavaScript 奇技淫巧](http://www.cnblogs.com/dson/p/4415278.html) \n原文作者：[FirstLovt](http://www.cnblogs.com/dson/) \n","tags":["JavaScript","JavaScript技巧","结构类型","数组遍历","前端"],"categories":["学习笔记"]},{"title":"Hello World for Hexo","url":"/2015/hexo-your-blog/","content":"\n![](https://tva2.sinaimg.com/large/0060lm7Tgw1f456ewdqd9j30jg05k74c.jpg)\n\n今天把博客移到了`Hexo`,感觉蛮不错的 ^_^ .\n \n## 简介 \n[hexo](https://github.com/hexojs/hexo) 是一款基于Node.js的静态博客框架。目前在GitHub上已有4k+ star 和 700+ fork ([官网](http://hexo.io/))。  \n是一个快速、简洁且高效的博客框架。`Hexo` 使用 `Markdown`（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n## 特性\n - 风一般的速度:\n  `Hexo`基于`Node.js`，支持多进程，几百篇文章也可以秒生成。\n - 流畅的撰写:\n  支持`GitHub Flavored Markdown`和所有`Octopress`的[插件](http://hexo.io/plugins/)。\n - 扩展性:\n  `Hexo`支持`EJS`、`Swig`和`Stylus`。通过插件支持`Haml`、`Jade`和`Less`.\n\n## 快速入门\n## 安装\n安装 `Hexo` 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：  \n - [Node.js](http://nodejs.org/)\n - [Git](http://git-scm.com/) \n\n如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。\n```bash\nnpm install -g hexo-cli \n```\n\n仅需一步就把 Hexo 本体和所有相依套件安装完毕，很简单吧？\n\n## 升级\n更新hexo到最新版\n```bash\nnpm update hexo -g  \n```\n\n## 初始化\n```bash\nhexo init <folder>\ncd <floder>\nnpm install\n```\n如果指定 `<folder>`，便会在目前的资料夹建立一个名为 `<folder>` 的新文件夹；否则会在目前文件夹初始化。\n\n## 新建  \n```bash\nhexo new [layout] <title>\n```\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 `_config.yml` 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。  \n\n## 生成静态文件 \n```bash\nhexo g\n//或者 hexo generate\n```\n## 启动服务\n```bash\nhexo s\n//或者 hexo server\n```\n启动服务后,打开浏览器输入 `http://localhost:4000` 回车,即可看到效果.\n\n## 部署\n```bash\nhexo d\n//可以通过hexo d -g 命令完成生成和部署\n```\n如果出现错误，可能是没有安装`部署`插件，请执行下面的命令安装插件：\n```bash\nnpm install hexo-deploy-git --save-dev\n```\n\n> Hexo官网：[[http://Hexo.io](http://hexo.io)]  \n[部署Hexo](https://hexo.io/zh-cn/docs/deployment.html) \n\n\n","tags":["免费博客","Hexo"],"categories":["学习笔记"]},{"title":"解决 ByClassName 在IE中的兼容性问题","url":"/2014/solve-question-for-getElementsByClassName-on-ie/","content":"\n![](https://tva2.sinaimg.com/large/006qRazegw1f41ptt98crj30jg05kmx5.jpg)\n\n最近遇到一个`document.getElementsByClassName`在IE中的兼容性问题，有兼容性问题的代码如下：\n```js\nwindow.onload = function(){\n    var checkInput = document.getElementsByClassName(\"check\");\n    alert(checkInput.length);\n}\n```\n \n\n在IE的低版本中会出现如图所示的问题：  \n![error](https://tva2.sinaimg.com/large/0060lm7Tgw1f4a25f9llsj30ha04s0tt.jpg)  \n参考了网上的一些代码与视频，解决代码如下：    \n\n```js\nwindow.onload = function(){\n    if(!document.getElementsByClassName){\n        document.getElementsByClassName = function (cls){\n            var ret = [];\n            var els = document.getElementsByTagName('*');\n            for(var i = 0 ; i < els.length; i++){\n                if(els[i].className === cls \n                   || els[i].className.indexOf(cls + ' ') > -1 \n                   || els[i].className.indexOf(' ' + cls + ' ') > -1 \n                   || els[i].className.indexOf(' ' + cls) > -1){\n                   ret.push(els[i]);\n                }    \n            }\n            return ret;\n        }\n    }\n    var checkInput = document.getElementsByClassName(\"check\");\n    alert(checkInput.length);\n}\n```\n\n> 相关资料:\n  [getElementsByTagName](https://developer.mozilla.org/en-US/docs/Web/API/document/getElementsByTagName)\n  \n\n","tags":["JavaScript","前端","getElementsByClassName","IE兼容性"],"categories":["学习笔记"]},{"title":"Brackets - 强大免费的开源跨平台Web前端开发工具IDE","url":"/2014/brackets/","content":"![](https://tva2.sinaimg.com/large/0060lm7Tgw1f456rev3nij30jg05kjrm.jpg)\n昨天上手了一款叫[Brackets](http://brackets.io/ \"Brackets 官网\")的Web前端编辑器(感谢[@buyibuyi](http://weibo.com/u/1914616062 \"去他的微博\") 的倾情推荐),初步用起来感觉还不错，在这里推荐一下，希望大家也喜欢 ^_^ 。  \n \nBrackets 是一个免费、开源且跨平台的 HTML/CSS/JavaScript 前端 WEB 集成开发环境 (IDE工具)。该项目由 Adobe 创建和维护，根据MIT许可证发布，支持 Windows、Linux 以及 OS X 平台。  \n\nBrackets 的特点是简约、优雅、快捷！它没有很多的视图或者面板，也没太多花哨的功能，它的核心目标是减少在开发过程中那些效率低下的重复性工作，例如浏览器刷新，修改元素的样式，搜索功能等等。和 Sublime Text、Everedit 等通用代码编辑器不一样，Brackets 是专门针对 WEB 前端开发而生……  \n\n平台：Windows/Mac OS X/Linux  \n特色：实时开发。在按下ctrl+s的时候，自动刷新HTML页面；在修改css文件的时候，每次按下键盘都会刷新浏览器中的表现，并在光标停留在css选择器中时会标识对应的元素，much like chrome developer tool do，有图有真相。  \n![](https://tva2.sinaimg.com/large/6dcfd1b8gw1f7kxed24zkj20dw055t9a.jpg) \n\n除此之外，还自带了JSLint工具(JavaScript验证工具)，并且官方还提供了不少插件，比如Emmet(以前叫zen coding)这些插件都可以在`扩展管理器`中找到。  \n\n当然，强大的Brackets提供了多国语言的支持，如果要修改语言的话，请在导航栏上点击`Debug`&gt;`Select lanuage`，然后选择`简体中文`，重新启动一下软件就好了。  \n![](https://tva2.sinaimg.com/large/6dcfd1b8gw1f7kw0wwbpcj211y0ka10g.jpg)\n\n好了，就这么多，I wish you good mood every day！ \n\n\n> Brackets官网：[[http://brackets.io](http://brackets.io)]  ","tags":["Brackets","编辑器"],"categories":["应用软件"]},{"title":"利用Github Pages和Jekyll搭建无限流量的免费Blog","url":"/2013/helloworld-for-githubpages/","content":"\n![](https://tva2.sinaimg.com/large/0060lm7Tgw1f47cyzrtboj30jg05k745.jpg)\n对于在Github上搭建免费Blog，我起先一无所知(好吧，知道你们会汗颜)。某一天，好友`诺兰德`说他为了应付面试(哈哈，请不要在意这些细节)，而加班加点的赶了一个Blog出来，看了他的Blog之后，我很好奇，就让他给我说说是怎么搭建的。他就直接丢了一个教程链接给我，研究了一天，然后就开始了我自己的Blog之旅。好吧，闲话有点多了，下面开始咱们的Blog之旅吧。 \n \n### 一、Github和Jekyll是什么？\n[Github](http://github.com \"Github\"):是一个具有版本管理功能的代码仓库，每个项目都有一个主页，列出项目的源文件。  \n\n[Github Pages](https://pages.github.com/ \"Github Pages\"):对于一个新手来说，看到一大堆源码，只会让人头晕脑涨，不知何处入手。他希望看到的是，一个简明易懂的网页，说明每一步应该怎么做。因此，github就设计了Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，`github Pages可以被认为是用户编写的、托管在github上的静态网页`。github提供模板，允许站内生成网页，但也允许用户自己编写网页，然后上传。有意思的是，这种上传并不是单纯的上传，而是会经过Jekyll程序的再处理。  \n\n`注：若要使用Github Pages，请先注册Github账号 。` \n\n[Jekyll](http://jekyllrb.com/ \"Jekyll\"):一个静态站点生成器，它会根据网页源码生成静态文件。它提供了模板、变量、插件等功能，所以实际上可以用来编写整个网站。  \n\n### 二、Git工具的安装和简单使用\nGit是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。   \n\n下载安装Git：[点击这里下载](http://git-scm.com/book/en/Getting-Started-Installing-Git \"下载Git\")   \n\n注：安装的时候第三步记得选中`Simple context menu(Registry based)`，才可以在右键菜单中生成`Git GUI here`和`Git Bash Here`选项，如下图所示\n![gitinstall](https://tva2.sinaimg.com/large/0060lm7Tgw1f47cyzizpyj30dz0atmyj.jpg)    \n安装完成后，找个目录 `右键`\\>`Git Bash Here`，打开Git的命令行工具。在里面输入`git --help`，就能看到命令的使用帮助了。    \n\n附：[Git的简易指南](http://rogerdudler.github.io/git-guide/index.zh.html \"Git的简易指南\")    \n\n### 三、搭建博客\n\n#### 1.新建项目 \n在你的电脑上，新建一个文件夹，作为博客的根目录，名字任取，假设我们取名为`demo`：\n> $ mkdir demo\n\n进入文件夹`demo`，并初始化该文件夹：\n> $ cd demo    \n> $ git init\n\n然后创建一个没有父节点的分支`gh-pages`。因为github规定，只有该分支中的页面，才会生成网页文件：\n> $ git checkout --orphan gh-pages\n\n#### 2.新建配置文件\n在`demo`文件夹中新建一个名字为`_config.yml`的文本文件。它是jekyll的配置文件(具体配置请参考[官方配置](http://jekyllrb.com/docs/configuration/ \"官方配置\"))。我们在其中写入以下内容，`注意冒号后面需要加空格`：\n> baseurl: /demo\n\n文件夹结构为：    \n> /demo    \n> &nbsp;&nbsp;|--_config.yml    \n\n#### 3.新建模板文件\n在博客根目录下新建一个文件夹，名字为`_layouts`，用于存放模板文件：\n> $ mkdir _layouts\n\n进入`_layouts`文件夹，并新建一个`default.html`文件，作为博客的默认模板。并写入以下内容： \n```\n<!doctype html>\n<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\"/>\n    <title>{{ page.title }}</title>\n  </head>\n  <body>\n    {{ content }}\n  </body>\n</html>\n```\n\nJekyll使用[Liquid模板语言](http://github.com/shopify/liquid/wiki/liquid-for-designers)，&#123;&#123; page.title &#125;&#125;表示文章标题，&#123;&#123; content &#125;&#125;表示文章内容，更多模板变量请参考[官方文档](http://jekyllrb.com/docs/variables/)。    \n\n文件夹结构变为：   \n> /demo  \n> &nbsp;&nbsp;|--_config.yml  \n> &nbsp;&nbsp;|--_layouts  \n> &nbsp;&nbsp;|&nbsp;&nbsp;|--default.html   \n\n#### 4.新建文章\n回到`demo`文件夹，新建一个文件夹，名字为`_posts`，用于存放博客文章：\n> $ mkdir _posts\n\n进入`_posts`文件夹，新建文本文档，名字假定为2013-12-12-hello-world.html`文件名称格式为年-月-日-标题.后缀名`，后缀名可以是`html`或者`markdown`。\n\n在该文件中，填入以下内容\n```\n---  \nlayout: default  \ntitle: 我的第一篇文章  \n---  \n<h1>{{ page.title }}</h1>  \n<p>Hello,Jekyll!</p>  \n<p>{{ page.date | date_to_string }}</p>  \n```\n\n每篇文章的头部，都必须有一个[YAML文件头](http://jekyllrb.com/docs/frontmatter/)，用来设置一些元数据。以`---`标记开头和结尾，里面每一行设置一种元数据。   \n> 'layout: default' >>> 表示该文章用的模板是_layouts文件夹下的default.html文件。  \n> 'title: 我的第一篇文章' >>> 表示该文章的标题是'我的第一篇文章'。如果不设置这个值，则默认使用文件名中的标题，即'hello-world'。  \n> 'page.title' >>> 就是文件头中设置的title，即'我的第一篇文章'。  \n> 'page.date' >>> 即为文件名的日期，也可以在文件头中重新设置date。  \n> 'date_to_string' >>> 表示将page.date 变量转换成人类可读的格式。   \n\n文件夹结构变为：   \n> /demo  \n> &nbsp;&nbsp;|--_config.yml  \n> &nbsp;&nbsp;|--_layouts  \n> &nbsp;&nbsp;|&nbsp;&nbsp;|--default.html  \n> &nbsp;&nbsp;|--_posts  \n> &nbsp;&nbsp;|&nbsp;&nbsp;|--2013-12-12-hello-world.html  \n\n#### 5.新建首页\n回到`demo`文件夹，新建一个文件叫`index.html`并填入以下内容： \n```\n---\nlayout: default\ntitle: 我的Blog\n---\n<h2>{{ page.title }}</h2>\n<p>最新文章</p>\n<ul>\n    {% for post in site.posts %};\n    <li>{{ post.date | date_to_string }} <a href=\"{{ post.url }}\">{{ post.title }}</a></li>\n    {% endfor %};\n</ul>\n```\n\n这里的&#123;&#37; for post in site.posts &#37;&#125;表示对所有的文章进行循环遍历，这里要注意的是，`Liquid`模板语言规定，输出内容使用两层大括号，单纯的命令使用一层大括号。至于&#123;&#123; site.baseurl &#125;&#125;就是_config.yml中设置的baseurl变量。\n\n文件夹结构变成：\n> /demo  \n> &nbsp;&nbsp;|--_config.yml  \n> &nbsp;&nbsp;|--_layouts  \n> &nbsp;&nbsp;|&nbsp;&nbsp;|--default.html  \n> &nbsp;&nbsp;|--_posts  \n> &nbsp;&nbsp;|&nbsp;&nbsp;|--2013-12-12-hello-world.html  \n> &nbsp;&nbsp;|--index.html    \n\n#### 6.发布博客\n先将所有内容加入到本地git库`注：当前目录为demo`：\n> $ git add .   \n> $ git commit -m \"first commit\"  \n\n前往[Github](http://github.com)，新建一个名为`demo`的库，建好后将本地内容推送到Github上你刚刚建的demo库中`注：将下面命令中的username换成你自己的username`：\n> $ git remote add origin https://github.com/username/demo.git   \n> $ git push origin gh-pages   \n\n上传成功之后，等10分钟左右，访问 `http://username.github.com/demo/` 就可以看到博客已经生成了（将username换成你的用户名）。\n\n#### 7.绑定域名\n如果你不想用`http://username.github.com/demo/`这个域名，可以换成自己的域名。\n\n具体方法是在repo的根目录下面，新建一个名为`CNAME`的文本文件，里面写入你要绑定的域名，比如example.com或者xxx.example.com。\n\n如果绑定的是顶级域名，则DNS要新建一条A记录，指向204.232.175.78。如果绑定的是二级域名，则DNS要新建一条CNAME记录，指向username.github.com（请将username换成你的用户名）。此外，别忘了将_config.yml文件中的baseurl改成根目录\"/\"。\n\n至此，最简单的Blog就算搭建完成了。进一步的完善，请参考Jekyll创始人的[示例库](http://github.com/mojombo/tpw)，以及其他用Jekyll搭建的[Blog](http://github.com/jekyll/jekyll/wiki/Sites)。\n\n(完)\n\n\n> 特别感谢：[阮一峰老师](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html \"阮一峰：搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门\")     ","tags":["Jekyll","免费博客","GitHub Pages"],"categories":["学习笔记"]},{"title":"Sublime Text 的简单安装与详细配置","url":"/2013/preferences-sublime/","content":"![](https://tva2.sinaimg.com/large/0060lm7Tgw1f456evwn23j30jg05kglq.jpg)\n\n\n最近迷上了一款文本编辑器叫`Sublime Text`，[官网](http://www.sublimetext.com/ \"Sublime Text 官网\")，给人的第一感觉是轻，而且里面的各种自定义配置用起来真的是如鱼得水。写这篇文章主要是防止以后到处寻找而做个备份。\n \n### `Sublime Text`的下载安装\n进入`Sublime Text`的[官网](http://www.sublimetext.com/ \"Sublime Text 官网\")，下载`Sublime Text`，有2和3版本，请根据自己爱好进行下载安装。\n\n### `Package Control`的安装\n首先打开`Console`>>>快捷键：`Ctrl+Esc下面的那个键`，输入下面的代码，然后回车(请注意软件自身的版本)\n如果是`Sublime Text3`，代码如下：\n```\nimport urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())\n```\n\n如果是`Sublime Text 2`，则代码如下：\n```\nimport urllib2,os; pf='Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), 'wb' ).write( urllib2.urlopen( 'http://sublime.wbond.net/' +pf.replace( ' ','%20' )).read()); print( 'Please restart Sublime Text to finish installation')\n```\n重启软件即可。\n\n\n### 插件的安装与卸载\n\n#### 1. 插件的安装：\n重启软件后，快捷键`Ctrl+Shift+P`就可以打开`Package Control`了，输入关键字`Install Package` + `回车`，会进入插件候选安装界面，输入你要安装的插件名称，如`Emmet`，找到后，回车安装。\n\n#### 2. 插件的卸载：\n打开`Package Control`，输入关键字`Remove Package`+`回车`，会进入插件候选删除界面，输入你要卸载的插件名称，如`Emmet`，找到后，回车卸载。\n\n#### 3. 推荐插件:  \n1. [Package Control](https://sublime.wbond.net/installation)\n2. [Git](https://github.com/kemayo/sublime-text-git)\n3. [GitGutter](https://github.com/jisaacks/GitGutter)\n4. [Emmet](http://emmet.io/)\n5. [AllAutoComplete](https://github.com/alienhard/SublimeAllAutocomplete)\n6. [ColorPicker](http://weslly.github.io/ColorPicker/)\n7. [MarkdownPreview](https://github.com/revolunet/sublimetext-markdown-preview)\n8. [DocBlockr](https://github.com/spadgos/sublime-jsdocs)\n9. [SublimeCodeIntel](https://github.com/SublimeCodeIntel/SublimeCodeIntel)\n10. [BracketHighlighter](https://github.com/facelessuser/BracketHighlighter)\n11. [SideBarFolders](https://github.com/titoBouzout/SideBarFolders)\n12. [SideBarEnhancements](https://github.com/titoBouzout/SideBarEnhancements)\n\n#### 4. 推荐字体:\n>[YaHei.Consolas](https://dn-ioliu.qbox.me/YaHei.Consolas.1.11b.rar)   \n\n#### 5. 推荐主题\n>Centurion  \n>Afterglow \n\n\n### Preferences.sublime文件的详细配置\n接下来就是>>>菜单栏`Preferences>Setting User`打开`Preferences.sublime`配置文件，去搜索了下，具体配置如下:\n```json\n{\n    //主题文件的位置\n    \"theme\":\"Centurion.sublime-theme\",\n    \"color_scheme\":\"Packages/Color Scheme - Default/Monokai.tmTheme\",\n    //\"theme\": \"Afterglow-orange.sublime-theme\",\n    //\"color_scheme\": \"Packages/Theme - Afterglow/Afterglow.tmTheme\",\n    //字体\n    \"font_face\":\"Consolas\",\n    //\"font_face\": \"YaHei Consolas Hybrid\",\n    //字体大小\n    \"font_size\":11.0,\n    \"ignored_packages\":\n    [\n        \"Vintage\"\n    ],\n    //每行code相对于上一行代码的上边距\n    \"line_padding_top\":2,\n    //tab键缩进用空格代替\n    \"translate_tabs_to_spaces\":true,\n    //自动换行\n    \"word_warp\":true,\n    //tab键制表符宽度\n    \"tab_size\":4,\n    //是否显示行号\n    \"line_number\":true,\n    //是否显示代码折叠按钮\n    \"fold_buttons\":true,\n    //不管鼠标在不在行号边栏，代码折叠按钮一直显示\n    \"fade_fold_buttons\":true,\n    //按回车时，自动与制表位对其\n    \"auto_indent\":true,\n    //自动匹配引号，括号等\n    \"auto_match_enabled\":true,\n    //突出显示当前光标所在行\n    \"highlight_line\":true,\n    //设置光标闪动方式\n    \"caret_style\":\"smooth\",\n    //是否特殊显示当前光标所在的括号、代码头尾闭合标记\n    \"match_brackets\":true,\n    //切换到其他文件标签或点击其他非本软件区域，文件自动保存\n    \"save_on_focus_last\":true,\n    //代码提示\n    \"auto_complete\":true,\n    //设置为true时，按Tab会根据前后环境进行代码自动匹配补全\n    \"tab_completion\":true,\n    //选中的文本按Ctrl+F时，自动复制到查找面板的文本框里\n    \"find_selected_text\":true,\n    //防止SublimeText自动检查更新\n    \"update_check\":false\n}\n```\n\n^_^/，好了，完工，具体使用情况还是要依靠自己的喜好而来，这里的配置并不唯一，请不要在意这些细节~。\n\n\n\n> 3103 可用  \n\n```\n—– BEGIN LICENSE —–\nRyan Clark\nSingle User License\nEA7E-812479\n2158A7DE B690A7A3 8EC04710 006A5EEB\n34E77CA3 9C82C81F 0DB6371B 79704E6F\n93F36655 B031503A 03257CCC 01B20F60\nD304FA8D B1B4F0AF 8A76C7BA 0FA94D55\n56D46BCE 5237A341 CD837F30 4D60772D\n349B1179 A996F826 90CDB73C 24D41245\nFD032C30 AD5E7241 4EAA66ED 167D91FB\n55896B16 EA125C81 F550AF6B A6820916\n—— END LICENSE ——\n```\n\n\n> 3083 可用  \n\n```\n----- BEGIN LICENSE -----\nAndrew Weber\nSingle User License\nEA7E-855605\n813A03DD 5E4AD9E6 6C0EEB94 BC99798F\n942194A6 02396E98 E62C9979 4BB979FE\n91424C9D A45400BF F6747D88 2FB88078\n90F5CC94 1CDC92DC 8457107A F151657B\n1D22E383 A997F016 42397640 33F41CFC\nE1D0AE85 A0BBD039 0E9C8D55 E1B89D5D\n5CDB7036 E56DE1C0 EFCC0840 650CD3A6\nB98FC99C 8FAC73EE D2B95564 DF450523\n------ END LICENSE ------\n```\n\n    \n> SublimeText官网:[[http://www.sublimetext.com/](http://www.sublimetext.com/)] ","tags":["编辑器","Sublime Text","配置","插件"],"categories":["应用软件"]}]